<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Liz Roten</title>
    <link>lizroten.com/post/</link>
      <atom:link href="lizroten.com/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â© Liz Roten 2021</copyright>
    <image>
      <url>/lizroten.com/images/icon_hu9684a0c7728a1791553eb63a20e70951_11434_512x512_fill_lanczos_center_2.png</url>
      <title>Posts</title>
      <link>lizroten.com/post/</link>
    </image>
    
    <item>
      <title>Radial rtistry</title>
      <link>lizroten.com/blog/rtistry-with-contour/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      <guid>lizroten.com/blog/rtistry-with-contour/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been obsessed with &lt;a href=&#34;https://twitter.com/ijeamaka_a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ijeamaka Anyene&amp;rsquo;s&lt;/a&gt; art for months now. Her &lt;a href=&#34;https://ijeamaka-anyene.netlify.app/posts/2021-01-04-radial-patterns-in-ggplot2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;zine&lt;/a&gt; is gorgeous, and I&amp;rsquo;ve been antsy to try some of the techniques out.&lt;/p&gt;
&lt;h2 id=&#34;spokes-pattern-01-variants&#34;&gt;Spokes: Pattern 01 Variants&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# setup 
library(tidyverse)
library(colorspace)
set.seed(246153)

library(showtext)
showtext_auto()
file &amp;lt;- sysfonts::font_files()

font_add(&amp;quot;Nunito Light&amp;quot;, &amp;quot;Nunito-Light.ttf&amp;quot;)
font_add(&amp;quot;Cormorant Garamond&amp;quot;, &amp;quot;CormorantGaramond-Regular.ttf&amp;quot;)

my_caption &amp;lt;- &amp;quot;Liz Roten | @LizRoten&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See original &lt;a href=&#34;https://ijeamakaanyene.github.io/patterns/zine/zine_radial_patterns.html#4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lines &amp;lt;- tibble(
  x = seq(0, 29, by = 0.2),
  xend = rep(0,146),
  y = runif(146, min = 5, max = 9),
  yend = rep(0,146),
  speed = 3
)


ggplot() +
  geom_segment(data = lines,
               aes(x = x,
                   y = y,
                   xend = xend,
                   yend = yend),
               color = &amp;quot;white&amp;quot;,
               alpha = 0.5) +
  geom_point(data = lines, 
             aes(x = x,
                 y = y),
             color = &amp;quot;white&amp;quot;) +
  coord_polar() +
  scale_x_continuous(limits = c(0, 29)) +
  # scale_y_continuous(limits = c(-1, 10)) +
  labs(caption = my_caption) +
  theme_void() +
  theme(plot.background = element_rect(fill = &amp;quot;#14342B&amp;quot;,
                                       color = NA),
        panel.background = element_rect(fill = &amp;quot;#14342B&amp;quot;,
                                        color = NA),
        plot.caption = element_text(family = &amp;quot;Nunito Light&amp;quot;,
                                    color = &amp;quot;white&amp;quot;,
                                    size = 12),
        plot.margin = unit(c(.5, .5, .2, .5), &amp;quot;cm&amp;quot;)
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/rtistry-with-contour/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;spokes-pattern-10-variants&#34;&gt;Spokes: Pattern 10 Variants&lt;/h2&gt;
&lt;p&gt;See original &lt;a href=&#34;https://ijeamakaanyene.github.io/patterns/zine/zine_radial_patterns.html#6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;increment = .05

circle_1 = tibble(
  x = seq(from = 0, to = 5, by = increment),
  xend = seq(from = 0, to = 5, by = increment),
  y = 0, 
  yend = 1.4,
  type = LETTERS[1])

circle_2 = tibble(
  x = seq(from = 0, to = 5, by = increment  + increment),
  xend = seq(from = 0, to = 5, by = increment + increment),
  y = 1.5,
  yend = 2.9,
  type = LETTERS[2])

circle_3 = tibble(
  x = seq(from = 0, to = 5, by = increment ),
  xend = seq(from = 0, to = 5, by = increment  ),
  y = 3,
  yend = 4.5,
  type = LETTERS[3])

palette_values = c(&amp;quot;#94524A&amp;quot;, &amp;quot;#8d667e&amp;quot;, &amp;quot;#39355c&amp;quot;)


bind_rows(circle_1, circle_2, circle_3) %&amp;gt;%
  ggplot(.) + 
  geom_segment(aes(x = x, 
                   y = y,
                   xend = xend, 
                   yend = yend,
                   color = type),
               show.legend = F) +
  scale_color_manual(values = palette_values) +
  labs(caption = my_caption) +
  coord_polar() +
  theme_void() +
    theme(
      # plot.background = element_rect(fill = &amp;quot;#565254&amp;quot;,
      #                                  color = NA,
      #                                  size = 0),
      #   panel.background = element_rect(fill = &amp;quot;#565254&amp;quot;,
      #                                   color = NA,
      #                                   size = 0),
        plot.caption = element_text(family = &amp;quot;Nunito Light&amp;quot;,
                                    color = &amp;quot;black&amp;quot;,
                                    hjust = 1,
                                    size = 14),
        plot.caption.position = &amp;quot;plot&amp;quot;,
        plot.margin = unit(c(.5, .5, .5, .5), &amp;quot;cm&amp;quot;)
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/rtistry-with-contour/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;increment = .05

circle_1 = tibble(
  x = seq(from = 0, to = 5, by = increment),
  xend = seq(from = 0, to = 5, by = increment),
  y = 0, 
  yend = 1.5,
  type = LETTERS[1])

circle_2 = tibble(
  x = seq(from = 0, to = 5, by = increment),
  xend = seq(from = 0, to = 5, by = increment),
  y = 1.5,
  yend = 3,
  type = LETTERS[2])

circle_3 = tibble(
  x = seq(from = 0, to = 5, by = increment ),
  xend = seq(from = 0, to = 5, by = increment  ),
  y = 3,
  yend = 4.5,
  type = LETTERS[3])

palette_values = c(&amp;quot;#7A443E&amp;quot;,
                   colorspace::lighten(&amp;quot;#7A443E&amp;quot;, 0.5),
                   colorspace::lighten(&amp;quot;#7A443E&amp;quot;, 0.8))

bind_rows(circle_1, circle_2, circle_3) %&amp;gt;%
  ggplot(.) + 
  geom_segment(aes(x = x, 
                   y = y,
                   xend = xend, 
                   yend = yend,
                   color = type),
               show.legend = F) +
  scale_color_manual(values = palette_values) +
  labs(caption = my_caption) +
  coord_polar() +
  theme_void() +
    theme(
        plot.caption = element_text(family = &amp;quot;Nunito Light&amp;quot;,
                                    color = &amp;quot;black&amp;quot;,
                                    hjust = 1,
                                    size = 14),
        plot.caption.position = &amp;quot;plot&amp;quot;,
        plot.margin = unit(c(.5, .5, .5, .5), &amp;quot;cm&amp;quot;)
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/rtistry-with-contour/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;florals&#34;&gt;Florals&lt;/h2&gt;
&lt;p&gt;I fell in love with the opening slide in Ijeamaka Anyene&amp;rsquo;s talk at &lt;a href=&#34;https://github.com/Ijeamakaanyene/aRt_ggplot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RLadies Johannesburg&lt;/a&gt;, so I wanted to give it a try!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(246153)

burst &amp;lt;- tibble(
  x = seq(0, 10, by = 0.3),
  xend = seq(0,10, by = 0.3),
  y =  0,
  yend = 0.4,
  yend_jitt = jitter(yend, 2.6),
  yend_jitt_point = yend_jitt
  
)


plot_burst &amp;lt;- ggplot() +
  geom_segment(data = burst,
               aes(x = x,
                   y = y,
                   xend = xend,
                   yend = yend_jitt),
               color = &amp;quot;#F4AC32&amp;quot;,
               lwd = 0.5) +
  geom_point(data = burst, 
             aes(x = x,
                 y = yend_jitt),
             color = &amp;quot;#F4AC32&amp;quot;,
             size = 1.5
  ) +
  coord_polar() +
  theme_void()

bursts &amp;lt;- quote(expr = {cowplot::draw_plot(plot_burst,
                                           scale = runif(1, min = 1.2, max = 3),
                                           x = runif(1, min = 0, max = 10),
                                           y = runif(1, min = 0, max = 5))})


plot_all &amp;lt;- cowplot::ggdraw(xlim = c(0,12),
                            ylim = c(0,6)) +
  eval(bursts) +
  eval(bursts) +
  eval(bursts) +
  eval(bursts) +
  eval(bursts) +
  eval(bursts) +
  eval(bursts) +
  eval(bursts) +
  eval(bursts) +
  labs(caption = my_caption) +
  theme(plot.background = element_rect(fill = &amp;quot;#565254&amp;quot;,
                                       color = NA,
                                       size = 0),
        panel.background = element_rect(fill = &amp;quot;#565254&amp;quot;,
                                        color = NA,
                                        size = 0),
        plot.caption = element_text(family = &amp;quot;Nunito Light&amp;quot;,
                                    color = &amp;quot;white&amp;quot;,
                                    hjust = 1,
                                    size = 14),
        plot.caption.position = &amp;quot;plot&amp;quot;,
        plot.margin = unit(c(.5, .5, .5, .5), &amp;quot;cm&amp;quot;)
  )

plot_all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/rtistry-with-contour/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;see-also&#34;&gt;See also&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ijeamaka Anyene&amp;rsquo;s fantastic &lt;a href=&#34;https://ijeamaka-anyene.netlify.app/posts/2021-01-04-radial-patterns-in-ggplot2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;zine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Colors via &lt;a href=&#34;https://coolors.co/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://coolors.co/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Make a neat header image</title>
      <link>lizroten.com/blog/make-a-neat-header/</link>
      <pubDate>Sat, 13 Mar 2021 00:00:00 +0000</pubDate>
      <guid>lizroten.com/blog/make-a-neat-header/</guid>
      <description>&lt;p&gt;I made a pretty neat header image for this site using raster data from my &lt;a href=&#34;lizroten.com/project/square-lake-master-plan/&#34;&gt;Square Lake Master Plan Update&lt;/a&gt; project.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(sf)
library(ggplot2)
library(dplyr)
library(Cairo)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Download regional park geography from &lt;a href=&#34;https://gisdata.mn.gov/dataset/us-mn-state-metc-plan-parks-regional&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Minnesota Geospatial Commons&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## base geometries -------------------------------------------------------------
temp &amp;lt;- tempfile()
download.file(&amp;quot;ftp://ftp.gisdata.mn.gov/pub/gdrs/data/pub/us_mn_state_metc/plan_parks_regional/gpkg_plan_parks_regional.zip&amp;quot;,
  destfile = temp
)

square_lake &amp;lt;- sf::read_sf(unzip(temp, &amp;quot;plan_parks_regional.gpkg&amp;quot;)) %&amp;gt;%
  filter(STATUS == &amp;quot;Existing&amp;quot;) %&amp;gt;%
  filter(PARKNAME == &amp;quot;Square Lake&amp;quot;) %&amp;gt;%
  group_by(PARKNAME, AGENCY) %&amp;gt;%
  sf::st_union() %&amp;gt;%
  st_as_sf() %&amp;gt;%
  st_transform(4326)

fs::file_delete(&amp;quot;plan_parks_regional.gpkg&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I refined &lt;code&gt;contours.RDS&lt;/code&gt; in my previous project. The data come from &lt;a href=&#34;https://www.dnr.state.mn.us/maps/mntopo/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MnTOPO&lt;/a&gt;, a web application for viewing, printing and downloading high-resolution elevation data for the State of Minnesota that was collected using LiDAR technology. I only needed data from a small area, so I drew a polygon over my study area using MnTOPO.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# load 3 meter contours over the Square Lake area

contour &amp;lt;- readRDS(&amp;quot;contours.RDS&amp;quot;) %&amp;gt;%
  st_transform(4326) %&amp;gt;%
  sf::st_crop(xmin = -92.7854633,
              ymin = 45.1497518,
              xmax = -92.8007197,
              ymax = 45.1568488)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Generate plot with &lt;code&gt;{ggplot2}&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot() +
  geom_sf(
      data = contour,
      color = &amp;quot;gray75&amp;quot;,
      lwd = 0.2
    ) +
  theme_void()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/make-a-neat-header/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Finally, save the plot as a PDF and open it in Adobe Illustrator for modifications.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Cairo::CairoPDF(file = &amp;quot;contours.pdf&amp;quot;, 
                onefile = TRUE, width = 12, height = 10, bg = &amp;quot;transparent&amp;quot;)
ggplot() +
  geom_sf(
      data = contour,
      color = &amp;quot;gray75&amp;quot;,
      lwd = 0.2
    ) +
  theme_void()
dev.off()

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I adjusted the background and finessed the positioning so it would display like I wanted it to on my home page. Here is the final product.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;contours.png&#34; alt=&#34;Header image&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Converting Peloton resistance to Bowflex C6 resistance</title>
      <link>lizroten.com/blog/bowflex-c6-to-peloton-resistance-conversion-plots/</link>
      <pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate>
      <guid>lizroten.com/blog/bowflex-c6-to-peloton-resistance-conversion-plots/</guid>
      <description>&lt;p&gt;Around the holidays, my partner and I decided to bring a stationary exercise bike into our home. After many pros and cons lists, we opted for the &lt;a href=&#34;https://www.bowflex.com/bikes/c6/100894.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bowflex C6&lt;/a&gt;. I decided to try out this whole &lt;a href=&#34;https://www.onepeloton.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Peloton&lt;/a&gt; thing, and quickly found that the resistance adjustments are not equivalent between the Peloton bike and the C6. Thankfully, there is a wonderful &lt;a href=&#34;https://www.reddit.com/r/SchwinnIC4_BowflexC6/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;subreddit&lt;/a&gt; just for this model! The folks there directed me to this &lt;a href=&#34;https://www.reddit.com/r/pelotoncycle/wiki/index/resistancechart&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;conversion chart&lt;/a&gt;, which then led me to a &lt;a href=&#34;https://www.etsy.com/listing/940670883/schwinn-ic4-exercise-bike-resistance?ref=hp_opfy-3&amp;amp;frs=1&amp;amp;bes=1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;3D-printed plate&lt;/a&gt; to keep on my handlebars.&lt;/p&gt;
&lt;p&gt;As I kept going along in my classes, all I could think was &amp;ldquo;What does this look like on a plot? What is the distribution?&amp;rdquo; Here is the result.&lt;/p&gt;
&lt;h2 id=&#34;load-packages&#34;&gt;Load packages&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## load packages
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)

## theme and Peloton(c) red
source(&amp;quot;theme.R&amp;quot;)
pelo_red &amp;lt;- &amp;quot;#df1c2f&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-tibble&#34;&gt;Create tibble&lt;/h2&gt;
&lt;p&gt;Create data table.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;conv_table &amp;lt;- tibble(C6 = c(0, 5, 9, 17, 25, 33, 49, 100),
                     Peloton = c(0, 25, 30, 35, 40, 45, 50, 100),
                     Difficulty = seq(from = 0, to = 10, length.out = 8 ))

conv_table_long &amp;lt;- conv_table %&amp;gt;% 
  gather(C6, Peloton, key = &amp;quot;Bike&amp;quot;, value = &amp;quot;Resistance&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;plot&#34;&gt;Plot&lt;/h2&gt;
&lt;p&gt;Make the plot.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot &amp;lt;- ggplot(data = conv_table_long) +
  geom_smooth(mapping = aes(x = Difficulty,
                            y = Resistance,
                            color = Bike),
              se = FALSE) + 
  scale_color_manual(values = c(&amp;quot;white&amp;quot;,
                                pelo_red),
                     labels = c(&amp;quot;Bowflex C6&amp;quot;,
                                &amp;quot;Peloton&amp;quot;)) +
  scale_x_continuous(n.breaks = 3,
                     labels = c(&amp;quot;Easy&amp;quot;,
                                &amp;quot;Hard&amp;quot;,
                                &amp;quot;Impossible&amp;quot;)) +
  labs(title = &amp;quot;Spin bike resistance&amp;quot;,
       subtitle = &amp;quot;Peloton vs. Bowflex C6&amp;quot;,
       x = &amp;quot;Difficulty&amp;quot;,
       caption = &amp;quot;@LizRoten 2021 | Data r/pelotoncycle&amp;quot;) +
  my_theme  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Display plot&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;featured.png&#34; alt=&#34;Final plot&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;update&#34;&gt;Update!&lt;/h2&gt;
&lt;p&gt;I was scrolling through aforementioned &lt;a href=&#34;https://www.reddit.com/r/SchwinnIC4_BowflexC6/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;r/SchwinnIC4_BowflexC6&lt;/a&gt; and found a post by another data person!&lt;/p&gt;
&lt;p&gt;The conversion formula &lt;a href=&#34;https://www.reddit.com/user/raintower579/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;u/raintower579&lt;/a&gt; found is below&lt;/p&gt;
&lt;p&gt;$$ y = 0.0171x^2 - 0.64x + 9.1429 $$&lt;br&gt;
where &lt;code&gt;x&lt;/code&gt; is the Peloton resistance and &lt;code&gt;y&lt;/code&gt; is the C6 resistance.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pelo_conversion &amp;lt;- function(x){
  (0.0171*x^2) - (0.64*x) + 9.1429
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To estimate the equivalence beyond 50, we can create a new tibble and apply the function to a sequence of Peloton resistance settings. Instructors don&amp;rsquo;t tend to call out any value below 20, so we can start there.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tibble(peloton_resistance = seq(20,100,5)) %&amp;gt;%  # create Peloton resistance sequence, 20-100 by 5s
  mutate(c6_resistance = round(pelo_conversion(peloton_resistance), 1))
#&amp;gt; # A tibble: 17 x 2
#&amp;gt;    peloton_resistance c6_resistance
#&amp;gt;                 &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;
#&amp;gt;  1                 20           3.2
#&amp;gt;  2                 25           3.8
#&amp;gt;  3                 30           5.3
#&amp;gt;  4                 35           7.7
#&amp;gt;  5                 40          10.9
#&amp;gt;  6                 45          15  
#&amp;gt;  7                 50          19.9
#&amp;gt;  8                 55          25.7
#&amp;gt;  9                 60          32.3
#&amp;gt; 10                 65          39.8
#&amp;gt; 11                 70          48.1
#&amp;gt; 12                 75          57.3
#&amp;gt; 13                 80          67.4
#&amp;gt; 14                 85          78.3
#&amp;gt; 15                 90          90.1
#&amp;gt; 16                 95         103. 
#&amp;gt; 17                100         116.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By this table, I&amp;rsquo;ve been making my classes much harder than necessary.&lt;/p&gt;
&lt;p&gt;We can plot this function, as shown below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = conv_table,
       aes(x = Peloton,
           y = C6)) +
  geom_function( 
    fun = pelo_conversion,
    color = &amp;quot;white&amp;quot;) +
  stat_function(
    fun = pelo_conversion,
    geom = &amp;quot;point&amp;quot;,
    color = pelo_red,
    size = 2, 
    n = 17) +
  scale_x_continuous(limits = c(20, 100)) +
  scale_y_continuous(limits = c(0, 100)) +
  labs(title = &amp;quot;Peloton to Bowflex C6 resistance conversion&amp;quot;,
       x = &amp;quot;Peloton&amp;quot;,
       y = &amp;quot;Bowflex C6&amp;quot;,
       caption = &amp;quot;@LizRoten 2021 | Data r/pelotoncycle | Model u/raintower579&amp;quot;) +
  my_theme2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/bowflex-c6-to-peloton-resistance-conversion-plots/index.en_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The big, flashing caveat here is that every bike is calibrated just &lt;em&gt;slightly&lt;/em&gt; differently, so this might not be correct for the machine in my bedroom.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Maps with {edgebundle}</title>
      <link>lizroten.com/blog/maps-with-edgebundle/</link>
      <pubDate>Sat, 19 Dec 2020 00:00:00 +0000</pubDate>
      <guid>lizroten.com/blog/maps-with-edgebundle/</guid>
      <description>&lt;h2 id=&#34;goal&#34;&gt;Goal&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;{edgebundle}&lt;/code&gt; to map flight patterns over the US.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# remotes::install_github(&amp;quot;schochastics/edgebundle&amp;quot;)
library(edgebundle)
library(igraph)
library(ggplot2)
library(ggraph)
library(dplyr)
library(sf)
library(tigris)

set.seed(24601)

my_caption &amp;lt;- c(&amp;quot;Liz Roten (@LizRoten) | Data: openflights.org&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also need to use the Python library, datashader. &lt;code&gt;{edgebundle}&lt;/code&gt; ships with a nice function for installing all the dependencies.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;edgebundle:::install_bundle_py()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;data-prep&#34;&gt;Data prep&lt;/h2&gt;
&lt;p&gt;The data we will use is &lt;code&gt;us_flights&lt;/code&gt;, which is shipped with &lt;code&gt;{edgebundle}&lt;/code&gt;. &lt;code&gt;us_flights&lt;/code&gt; is a complex object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights &amp;lt;- us_flights # name us_flights
coords &amp;lt;- cbind(V(flights)$longitude, V(flights)$latitude) # extract coordinates

# create vertex sequence
verts &amp;lt;- data.frame(x = V(flights)$longitude, y = V(flights)$latitude) 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;supporting-data&#34;&gt;Supporting data&lt;/h3&gt;
&lt;p&gt;To make our output a little more aesthetically pleasing, we will go ahead and transform the data to use Albers Equal Area Conic.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;states &amp;lt;- tigris::states(cb = TRUE, progress_bar = FALSE) %&amp;gt;% 
  filter(STUSPS %in% state.abb,
         !NAME %in% c(&amp;quot;Alaska&amp;quot;,
                      &amp;quot;Hawaii&amp;quot;)) %&amp;gt;% 
  sf::st_transform(crs = &amp;quot; +proj=aea +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m no_defs&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;coords_full &amp;lt;- cbind(V(flights)$longitude, V(flights)$latitude,  V(flights)$name) # extract coordinates


coords_sf &amp;lt;- st_as_sf(x = as.data.frame(coords_full), coords = c(&amp;quot;V1&amp;quot;, &amp;quot;V2&amp;quot;), crs = 4326) %&amp;gt;% 
  sf::st_transform(crs = &amp;quot; +proj=aea +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m no_defs&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;edge-bundle&#34;&gt;Edge bundle&lt;/h2&gt;
&lt;p&gt;Create edge bundles&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;force_bundle &amp;lt;- edge_bundle_force(flights, xy = coords, compatibility_threshold = 0.6) 

force_bundle_sf &amp;lt;- force_bundle %&amp;gt;% 
  st_as_sf(coords = c(&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;), crs = 4326) %&amp;gt;% 
  sf::st_transform(crs = &amp;quot; +proj=aea +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m no_defs&amp;quot;) %&amp;gt;% 
  rowwise() %&amp;gt;% 
  mutate(x_coord = st_coordinates(geometry)[[1]],
         y_coord = st_coordinates(geometry)[[2]])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-map&#34;&gt;Create map&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;source(&amp;quot;theme.R&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;base_plot &amp;lt;- geom_sf(data = states,
          color = &amp;quot;white&amp;quot;,
          fill = NA,
          lwd = 0.1) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;final_map &amp;lt;- ggplot() +
  base_plot +
  geom_path(data = force_bundle_sf,
            aes(x = x_coord,
                y = y_coord,
                group = group),
            color = line_color,
            size = 0.5,
            alpha = 0.2) +
  geom_path(data = force_bundle_sf,
            aes(x = x_coord,
                y = y_coord,
                group = group),
            color = &amp;quot;white&amp;quot;,
            size = 0.005,
            alpha = 0.1) +
  geom_sf(data = coords_sf,
          color = line_color,
          size = 0.25) +
  geom_sf(data = coords_sf,
          color = &amp;quot;white&amp;quot;,
          size = 0.25,
          alpha = 0.1) +
  labs(title = &amp;quot;US Flight Network&amp;quot;,
       # subtitle = &amp;quot;Force Bundle Method&amp;quot;,
       caption = my_caption) +
  my_theme

final_map
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/maps-with-edgebundle/index_files/figure-html/map_force_bundle-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To get the sizing just right on the final image I posted on Twitter, I adjusted the size of my viewing panel in RStudio until I was happy with the dimensions.&lt;/p&gt;
&lt;h2 id=&#34;credits&#34;&gt;Credits&lt;/h2&gt;
&lt;p&gt;This entire post was inspired by &lt;a href=&#34;https://twitter.com/dr_xeo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dominic RoyÃ©&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Trying a very nice new tool, thanks to {edgebundle} package created by &lt;a href=&#34;https://twitter.com/schochastics?ref_src=twsrc%5Etfw&#34;&gt;@schochastics&lt;/a&gt;. Here the European flight network in a bundle flow version. &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rstats&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/rspatial?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rspatial&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/datavis?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#datavis&lt;/a&gt; &lt;a href=&#34;https://t.co/dty4tTSYdE&#34;&gt;pic.twitter.com/dty4tTSYdE&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dominic RoyÃ© (@dr_xeo) &lt;a href=&#34;https://twitter.com/dr_xeo/status/1340299685421076485?ref_src=twsrc%5Etfw&#34;&gt;December 19, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;You can find my tweet with this map &lt;a href=&#34;https://twitter.com/LizRoten/status/1341075405269295109&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finding the perfect sock pattern with {ravelRy}</title>
      <link>lizroten.com/blog/finding-the-perfect-sock-pattern-with-ravelry/</link>
      <pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate>
      <guid>lizroten.com/blog/finding-the-perfect-sock-pattern-with-ravelry/</guid>
      <description>&lt;p&gt;I am a knitter. Knitting is a calming, fulfilling practice that keep my hands busy and require &lt;em&gt;just&lt;/em&gt; enough brain power to keep my mind from wandering too far. Over the past winter, I conquered my fear of making socks, and now I profess that I am a sock knitter. I made socks for Christmas gifts, and churned out four pairs during my evenings, bus commutes, long work meetings, lectures, coffee and tea shop visits (basically everywhere). I&amp;rsquo;m comfortable with the standard stockinette sock, and I even ventured out into other patterns from Ravelry (&lt;em&gt;the&lt;/em&gt; social medium for yarn folks), like &lt;a href=&#34;https://www.ravelry.com/patterns/library/hermiones-everyday-socks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hermione&amp;rsquo;s Everyday Socks&lt;/a&gt; and the &lt;a href=&#34;https://www.ravelry.com/patterns/library/slip-it-simple-sock&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Slip It Simple Socks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But, even as the weather is warming here in Minnesota, working from home means that I don&amp;rsquo;t have a commute and COVID-19 means that I have plenty of spare angst, so I&amp;rsquo;ve decided to make a new pair of socks, and work with a new pattern.&lt;/p&gt;
&lt;p&gt;And, just when I was starting to glaze over scrolling through endless Ravelry pages and reviews, I found &lt;a href=&#34;https://github.com/walkerkq/ravelRy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ravelRy&lt;/a&gt;, an R package that interfaces seamlessly with Ravelry&amp;rsquo;s &lt;a href=&#34;https://www.ravelry.com/api&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;API&lt;/a&gt;. And its even on CRAN!&lt;/p&gt;
&lt;p&gt;Lets install, and get going!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&amp;quot;ravelRy&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ravelRy)
library(tidyverse)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;authentication&#34;&gt;Authentication&lt;/h2&gt;
&lt;p&gt;As with most APIs, you need to authenticate somehow. I&amp;rsquo;ll use my Ravelry account credentials (you&amp;rsquo;ll need a &lt;a href=&#34;https://www.ravelry.com/pro/developer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;free, pro account&lt;/a&gt; to access the API).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ravelRy::ravelry_auth(key = &amp;quot;username&amp;quot;)
ravelRy::ravelry_auth(key = &amp;quot;password&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;search-for-a-sock-pattern&#34;&gt;Search for a sock pattern!&lt;/h2&gt;
&lt;p&gt;Lets start simple, and just look for the first 20 results for &amp;ldquo;sock&amp;rdquo; that are available as a Ravelry download.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;search_result &amp;lt;- search_patterns(
  query = &amp;quot;sock&amp;quot;,
  page_size = 20,
  craft = &amp;quot;knitting&amp;quot;, # knitting or crochet
  fit = &amp;quot;adult&amp;quot;, # adult, baby, etc.
  ravelry_download = TRUE
)

head(search_result)
#&amp;gt; # A tibble: 6 x 7
#&amp;gt;   free       id name      permalink   designer.id designer.name  pattern_sources
#&amp;gt;   &amp;lt;lgl&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;             &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;          &amp;lt;list&amp;gt;         
#&amp;gt; 1 FALSE 1121082 Senbonza~ senbonzaku~       31024 Natalia Vasil~ &amp;lt;df[,60] [2 x ~
#&amp;gt; 2 FALSE 1126458 Ebil Cho~ ebil-choic~      123378 Sabrina Nessl~ &amp;lt;df[,60] [2 x ~
#&amp;gt; 3 FALSE 1105021 Curling ~ curling-mi~       32124 Helen Stewart  &amp;lt;df[,60] [2 x ~
#&amp;gt; 4 FALSE 1120396 Picnic B~ picnic-bla~       32124 Helen Stewart  &amp;lt;df[,60] [2 x ~
#&amp;gt; 5 TRUE   891114 Rye Light rye-light         45502 tincanknits    &amp;lt;df[,60] [3 x ~
#&amp;gt; 6 FALSE 1109817 Pink Lem~ pink-lemon~       72078 Amy Rapp       &amp;lt;df[,60] [2 x ~
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The fourth result is even my old friend, &amp;ldquo;Hermione&amp;rsquo;s Everyday Socks!&amp;rdquo;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;search_result[4, ] # get the fourth row in the table
#&amp;gt; # A tibble: 1 x 7
#&amp;gt;   free       id name      permalink    designer.id designer.name pattern_sources
#&amp;gt;   &amp;lt;lgl&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;              &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;         &amp;lt;list&amp;gt;         
#&amp;gt; 1 FALSE 1120396 Picnic B~ picnic-blan~       32124 Helen Stewart &amp;lt;df[,60] [2 x ~
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets take a look at the actual pattern from the search results using &lt;code&gt;get_patterns()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;hermione &amp;lt;- get_patterns(ids = search_result[4, ]$id)
str(hermione, max.level = 2)
#&amp;gt; tibble[,50] [1 x 50] (S3: tbl_df/tbl/data.frame)
#&amp;gt;  $ comments_count         : int 4
#&amp;gt;  $ created_at             : chr &amp;quot;2021/03/04 04:28:53 -0500&amp;quot;
#&amp;gt;  $ currency               : chr &amp;quot;&amp;quot;
#&amp;gt;  $ difficulty_average     : num 2.23
#&amp;gt;  $ difficulty_count       : int 123
#&amp;gt;  $ downloadable           : logi FALSE
#&amp;gt;  $ favorites_count        : int 370
#&amp;gt;  $ free                   : logi FALSE
#&amp;gt;  $ gauge                  : num 32
#&amp;gt;  $ gauge_divisor          : int 4
#&amp;gt;  $ gauge_pattern          : chr &amp;quot;Stockinette&amp;quot;
#&amp;gt;  $ generally_available    : chr &amp;quot;2021/03/01 00:00:00 -0500&amp;quot;
#&amp;gt;  $ id                     : int 1120396
#&amp;gt;  $ name                   : chr &amp;quot;Picnic Blanket Socks&amp;quot;
#&amp;gt;  $ pdf_url                : chr &amp;quot;&amp;quot;
#&amp;gt;  $ permalink              : chr &amp;quot;picnic-blanket-socks&amp;quot;
#&amp;gt;  $ price                  : chr &amp;quot;&amp;quot;
#&amp;gt;  $ projects_count         : int 476
#&amp;gt;  $ published              : chr &amp;quot;2021/03/01&amp;quot;
#&amp;gt;  $ queued_projects_count  : int 82
#&amp;gt;  $ rating_average         : num 4.76
#&amp;gt;  $ rating_count           : int 128
#&amp;gt;  $ row_gauge              : num 46
#&amp;gt;  $ updated_at             : chr &amp;quot;2021/03/04 04:28:53 -0500&amp;quot;
#&amp;gt;  $ url                    : chr &amp;quot;&amp;quot;
#&amp;gt;  $ yardage                : int 465
#&amp;gt;  $ yardage_max            : int 558
#&amp;gt;  $ personal_attributes    : chr &amp;quot;&amp;quot;
#&amp;gt;  $ sizes_available        : chr &amp;quot;Small, Medium, Large&amp;quot;
#&amp;gt;  $ product_id             : chr &amp;quot;&amp;quot;
#&amp;gt;  $ currency_symbol        : chr &amp;quot;&amp;quot;
#&amp;gt;  $ ravelry_download       : logi FALSE
#&amp;gt;  $ download_location      : chr &amp;quot;&amp;quot;
#&amp;gt;  $ pdf_in_library         : logi FALSE
#&amp;gt;  $ volumes_in_library     : chr &amp;quot;&amp;quot;
#&amp;gt;  $ gauge_description      : chr &amp;quot;32 stitches and 46 rows = 4 inches in Stockinette&amp;quot;
#&amp;gt;  $ yarn_weight_description: chr &amp;quot;Fingering (14 wpi)&amp;quot;
#&amp;gt;  $ yardage_description    : chr &amp;quot;465 - 558 yards&amp;quot;
#&amp;gt;  $ pattern_needle_sizes   :List of 1
#&amp;gt;  $ notes_html             : chr &amp;quot;\n&amp;lt;blockquote&amp;gt;\n&amp;lt;p&amp;gt;The Picnic Blanket Socks are the 2nd design in The Handmade Sock Society 4: &amp;lt;a href=\&amp;quot;https:&amp;quot;| __truncated__
#&amp;gt;  $ notes                  : chr &amp;quot;&amp;gt; The Picnic Blanket Socks are the 2nd\r\n&amp;gt; design in The Handmade Sock Society 4:\r\n&amp;gt; [purchase the collectio&amp;quot;| __truncated__
#&amp;gt;  $ packs                  :List of 1
#&amp;gt;  $ printings              :List of 1
#&amp;gt;  $ yarn_weight            :List of 1
#&amp;gt;  $ craft                  :List of 1
#&amp;gt;  $ pattern_categories     :List of 1
#&amp;gt;  $ pattern_attributes     :List of 1
#&amp;gt;  $ pattern_author         :List of 1
#&amp;gt;  $ photos                 :List of 1
#&amp;gt;  $ pattern_type           :List of 1
str(hermione$pattern_attributes)
#&amp;gt; List of 1
#&amp;gt;  $ : tibble[,2] [12 x 2] (S3: tbl_df/tbl/data.frame)
#&amp;gt;   ..$ id       : int [1:12] 1 2 3 9 10 12 18 23 26 211 ...
#&amp;gt;   ..$ permalink: chr [1:12] &amp;quot;male&amp;quot; &amp;quot;female&amp;quot; &amp;quot;unisex&amp;quot; &amp;quot;teen&amp;quot; ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I thought the Hermione sock was fairly straightforward. What is the average difficulty, on a scale of 1 to 10?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;hermione$difficulty_count # how many reviews rated a difficulty?
#&amp;gt; [1] 123
hermione$difficulty_average # what is the average difficulty?
#&amp;gt; [1] 2.227642
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets find my other sock pattern, Slip It Simple, and see what the difficulty rating is.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;slip_it_search &amp;lt;- search_patterns(query = &amp;quot;slip it simple sock&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, take the &lt;code&gt;id&lt;/code&gt; column and feed it into  &lt;code&gt;get_patterns()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;slip_it &amp;lt;- get_patterns(ids = slip_it_search$id)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is our difficulty?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;slip_it$difficulty_count
#&amp;gt; [1] 74
slip_it$difficulty_average
#&amp;gt; [1] 2.108108
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are fewer reviews, but the difficulty is super low.&lt;/p&gt;
&lt;h2 id=&#34;refining-our-search&#34;&gt;Refining our search&lt;/h2&gt;
&lt;p&gt;We can use the pattern table for &lt;code&gt;hermione&lt;/code&gt; and &lt;code&gt;slip_it&lt;/code&gt; to narrow our search further.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(search_patterns(
  query = &amp;quot;sock&amp;quot;,
  page_size = 20,
  craft = &amp;quot;knitting&amp;quot;, # knitting or crochet
  fit = &amp;quot;adult&amp;quot;, # adult, baby, etc.
  ravelry_download = TRUE,
  pattern_needle_sizes = 1,
  weight = &amp;quot;fingering&amp;quot;, # yarn weight
  type = &amp;quot;sock&amp;quot;,
  colors = 1
))
...
#&amp;gt; # A tibble: 6 x 7
#&amp;gt;   free       id name      permalink   designer.id designer.name  pattern_sources
#&amp;gt;   &amp;lt;lgl&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;             &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;          &amp;lt;list&amp;gt;         
#&amp;gt; 1 FALSE 1121082 Senbonza~ senbonzaku~       31024 Natalia Vasil~ &amp;lt;df[,60] [2 x ~
#&amp;gt; 2 FALSE 1126458 Ebil Cho~ ebil-choic~      123378 Sabrina Nessl~ &amp;lt;df[,60] [2 x ~
#&amp;gt; 3 FALSE 1105021 Curling ~ curling-mi~       32124 Helen Stewart  &amp;lt;df[,60] [2 x ~
#&amp;gt; 4 FALSE 1120396 Picnic B~ picnic-bla~       32124 Helen Stewart  &amp;lt;df[,60] [2 x ~
#&amp;gt; 5 TRUE   891114 Rye Light rye-light         45502 tincanknits    &amp;lt;df[,60] [3 x ~
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another trick is to go look at the URL when I am searching on Ravelry itself. This gives me an idea of what search terms I can add to &lt;code&gt;search_patterns()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;refined_search &amp;lt;- search_patterns(
  query = &amp;quot;socks&amp;quot;,
  pc = &amp;quot;mid-calf&amp;quot;,
  page_size = 100,
  craft = &amp;quot;knitting&amp;quot;, # knitting or crochet
  # fit = &amp;quot;adult&amp;quot;, # adult, baby, etc.
  ravelry_download = TRUE,
  pattern_needle_sizes = 1,
  weight = &amp;quot;fingering&amp;quot;, # yarn weight
  type = &amp;quot;sock&amp;quot;,
  colors = 1,
  diff = &amp;quot;3.5%7C8&amp;quot;,
  language = &amp;quot;en&amp;quot;,
  sort = &amp;quot;projects&amp;quot;,
  photo = &amp;quot;yes&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;review-refined-search-results&#34;&gt;Review refined search results&lt;/h2&gt;
&lt;p&gt;Now that I&amp;rsquo;ve picked out 100 patterns to consider/make fun plots with, lets review them in more detail.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;refined_patterns &amp;lt;- get_patterns(ids = refined_search$id) # this might take a while
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To start plotting, I will import my theme and &lt;a href=&#34;https://github.com/EdwinTh/dutchmasters&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;{dutchmasters}&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;source(&amp;quot;my_sock_theme.R&amp;quot;)
library(dutchmasters)
ggplot() +
  geom_density(refined_patterns,
    mapping = aes(
      x = comments_count,
      fill = free
    ),
    alpha = 0.7,
    color = &amp;quot;gray&amp;quot;
  ) +
  dutchmasters::scale_fill_dutchmasters(palette = &amp;quot;pearl_earring&amp;quot;) +
  labs(
    title = &amp;quot;Pattern Comment Density&amp;quot;,
    x = &amp;quot;Comment count&amp;quot;,
    y = &amp;quot;Density&amp;quot;,
    caption = my_caption
  ) +
  my_theme()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/finding-the-perfect-sock-pattern-with-ravelry/index_files/figure-html/comment_density-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Next, we&amp;rsquo;ll make a density plot series comparing the average difficulty rating for each pattern attribute (check out &lt;a href=&#34;https://github.com/walkerkq/ravelRy/blob/master/man/example_files/example_eda.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this example&lt;/a&gt; for this plot&amp;rsquo;s inspiration).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pattern_details_attributes &amp;lt;- refined_patterns %&amp;gt;%
  unnest(cols = &amp;quot;pattern_attributes&amp;quot;, names_sep = &amp;quot;_&amp;quot;)


top_attributes &amp;lt;- pattern_details_attributes %&amp;gt;%
  filter(difficulty_count &amp;gt;= 20) %&amp;gt;%
  count(pattern_attributes_permalink) %&amp;gt;%
  filter(n &amp;gt;= 20)

attributes_long &amp;lt;- pattern_details_attributes %&amp;gt;%
  filter(pattern_attributes_permalink %in% top_attributes$pattern_attributes_permalink) %&amp;gt;%
  mutate(pattern_attributes_permalink = stringr::str_to_title(pattern_attributes_permalink)) %&amp;gt;% 
  select(id, pattern_attributes_permalink, difficulty_average, rating_average)

plot_diff_by_att &amp;lt;- attributes_long %&amp;gt;%
  ggplot() +
  geom_density(aes(x = difficulty_average),
    fill = dutchmasters::dutchmasters$pearl_earring[4],
    color = &amp;quot;gray&amp;quot;,
    outline.type = &amp;quot;full&amp;quot;
  ) +
  facet_grid(reorder(
    pattern_attributes_permalink,
    difficulty_average, median
  ) ~ .,
  switch = &amp;quot;y&amp;quot;, scales = &amp;quot;free_y&amp;quot;
  ) +
  scale_x_continuous(limits = c(2, 7)) +
  labs(
    title = &amp;quot;Average difficulty rating by pattern attribute&amp;quot;,
    # subtitle = &amp;quot;Sock knitting patterns&amp;quot;,
    y = &amp;quot;&amp;quot;, x = &amp;quot;Average difficulty&amp;quot;,
        caption = my_caption

  ) +
  my_theme() +
  theme(
    panel.spacing.y = unit(0, &amp;quot;lines&amp;quot;),
    panel.grid = element_blank(),
    panel.grid.major.y = element_blank(),
    strip.text.y.left = element_text(angle = 0),
    strip.background = element_rect(fill = NA, color = NA),
    axis.text.y = element_blank())

plot_diff_by_att
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/finding-the-perfect-sock-pattern-with-ravelry/index_files/figure-html/plot_difficulty_by_attribute-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;narrow-down-results&#34;&gt;Narrow down results&lt;/h2&gt;
&lt;p&gt;I want to use a pattern with high ratings and a high number of projects. What do these distributions look like?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(cowplot)

project_count &amp;lt;- ggplot(data = refined_patterns) +
  geom_density(
    mapping = aes(x = projects_count),
    fill = dutchmasters::dutchmasters$pearl_earring[2],
    alpha = 0.8,
    color = &amp;quot;gray&amp;quot;
  ) +
  scale_x_continuous(labels = scales::comma) +
  labs(
    title = &amp;quot;Project Count&amp;quot;,
    x = &amp;quot;Projects&amp;quot;,
    y = &amp;quot;&amp;quot;
  ) +
  my_theme()

rating_count &amp;lt;- ggplot(data = refined_patterns) +
  geom_density(
    mapping = aes(x = rating_count),
    fill = dutchmasters::dutchmasters$pearl_earring[3],
    alpha = 0.8,
    color = &amp;quot;gray&amp;quot;
  ) +
  scale_x_continuous(labels = scales::comma) +
  labs(
    title = &amp;quot;Rating Count&amp;quot;,
    x = &amp;quot;Ratings&amp;quot;,
    y = &amp;quot;&amp;quot;,
        caption = my_caption

  ) +
  my_theme()


cowplot::plot_grid(project_count, rating_count)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/finding-the-perfect-sock-pattern-with-ravelry/index_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It looks like there is a big drop-off around 1,000 project and 500 ratings.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;project_rating_patterns &amp;lt;- refined_patterns %&amp;gt;%
  filter(
    projects_count &amp;gt;= 1000,
    rating_count &amp;gt;= 500
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That &lt;code&gt;filter()&lt;/code&gt; took us from 100 patterns to 11. Progress!&lt;/p&gt;
&lt;p&gt;Now, lets look at the ratings and difficulty. We will also separate these out by availability.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(project_rating_patterns) +
  geom_point(
    mapping = aes(
      x = difficulty_average,
      y = rating_average,
      color = free
    ),
    size = 4
  ) +
  dutchmasters::scale_color_dutchmasters(palette = &amp;quot;pearl_earring&amp;quot;) +
  labs(
    title = &amp;quot;Average Rating and Average Difficulty&amp;quot;,
    x = &amp;quot;Average difficulty&amp;quot;,
    y = &amp;quot;Average Rating&amp;quot;,
    caption = my_caption
  ) +
  my_theme()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/finding-the-perfect-sock-pattern-with-ravelry/index_files/figure-html/average_rating_avg_difficulty-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Nothing too informative here. What are the top pattern attributes?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;project_rating_patterns %&amp;gt;%
  unnest(cols = &amp;quot;pattern_attributes&amp;quot;, names_sep = &amp;quot;_&amp;quot;) %&amp;gt;%
  count(pattern_attributes_permalink) %&amp;gt;%
  filter(n &amp;gt; 5) %&amp;gt;%
  arrange(desc(n)) %&amp;gt;%
  ggplot() +
  geom_col(aes(
    x = pattern_attributes_permalink,
    y = n
  ),
  fill = dutchmasters::dutchmasters$pearl_earring[9]
  ) +
  labs(
    title = &amp;quot;Top pattern attributes&amp;quot;,
    x = &amp;quot;Pattern attribute&amp;quot;,
    y = &amp;quot;&amp;quot;,
    caption = my_caption

  ) +
  my_theme()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/finding-the-perfect-sock-pattern-with-ravelry/index_files/figure-html/top-pattern-attributes-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Another thing that makes patterns easy to follow is if they are downloadable (as opposed to linked to another web page). Lets &lt;code&gt;filter()&lt;/code&gt; for that, and have a difficulty at least above 4.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;filter(
  project_rating_patterns, downloadable == TRUE,
  difficulty_average &amp;gt;= 4
) %&amp;gt;%
  arrange(-rating_average)
...
#&amp;gt;   comments_count                created_at currency difficulty_average
#&amp;gt; 1              8 2010/10/25 09:23:15 -0400      USD           4.252446
#&amp;gt; 2             27 2007/01/12 00:51:53 -0500      USD           4.903895
#&amp;gt; 3            131 2010/02/11 12:07:46 -0500                    4.434030
#&amp;gt; 4             22 2007/09/07 11:54:33 -0400                    4.520376
#&amp;gt;   difficulty_count downloadable favorites_count  free gauge gauge_divisor
#&amp;gt; 1              511         TRUE            4027 FALSE    32             4
#&amp;gt; 2             2362         TRUE           11155  TRUE     8             1
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;fetch-images&#34;&gt;Fetch images&lt;/h2&gt;
&lt;p&gt;Now that we only have four left, lets fetch the images!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;photo_links &amp;lt;- filter(
  project_rating_patterns, downloadable == TRUE,
  difficulty_average &amp;gt;= 4
) %&amp;gt;%
  unnest(cols = photos, names_sep = &amp;quot;_&amp;quot;) %&amp;gt;%
  filter(photos_sort_order == 4) %&amp;gt;%
  select(id, name, photos_medium_url)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we will use &lt;a href=&#34;https://github.com/dahtah/imager&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;{imager}&lt;/code&gt;&lt;/a&gt; to fetch the data and plot it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(imager)
photo_links$name
#&amp;gt; [1] &amp;quot;Pointelle&amp;quot;   &amp;quot;Firestarter&amp;quot; &amp;quot;Pomatomus&amp;quot;   &amp;quot;Skew&amp;quot;

map(photo_links$photos_medium_url, load.image) %&amp;gt;%
  map(plot, axes = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/finding-the-perfect-sock-pattern-with-ravelry/index_files/figure-html/images-1.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;lizroten.com/blog/finding-the-perfect-sock-pattern-with-ravelry/index_files/figure-html/images-2.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;lizroten.com/blog/finding-the-perfect-sock-pattern-with-ravelry/index_files/figure-html/images-3.png&#34; width=&#34;672&#34; /&gt;&lt;img src=&#34;lizroten.com/blog/finding-the-perfect-sock-pattern-with-ravelry/index_files/figure-html/images-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; [[1]]
#&amp;gt; Image. Width: 425 pix Height: 500 pix Depth: 1 Colour channels: 3 
#&amp;gt; 
#&amp;gt; [[2]]
#&amp;gt; Image. Width: 500 pix Height: 381 pix Depth: 1 Colour channels: 3 
#&amp;gt; 
#&amp;gt; [[3]]
#&amp;gt; Image. Width: 500 pix Height: 500 pix Depth: 1 Colour channels: 3 
#&amp;gt; 
#&amp;gt; [[4]]
#&amp;gt; Image. Width: 348 pix Height: 500 pix Depth: 1 Colour channels: 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;and-the-winner-is&#34;&gt;And the winner is&amp;hellip;.&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ravelry.com/patterns/library/pomatomus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pomatomus&lt;/a&gt;! I mean, look at those gorgeous waves!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images4-f.ravelrycache.com/uploads/GoldenIris/304984815/webp/DSC_0135_medium2.webp#jpg&#34; alt=&#34;Pomatomus socks from the front&#34;&gt;&lt;/p&gt;
&lt;p&gt;I have a lovely merino/nylon blend by &lt;a href=&#34;https://www.instagram.com/sunvalleyfibers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sun Valley Fibers&lt;/a&gt; waiting for me. I hope you enjoyed this little journey!&lt;/p&gt;
&lt;h2 id=&#34;credits&#34;&gt;Credits&lt;/h2&gt;
&lt;p&gt;I followed along &lt;a href=&#34;https://github.com/walkerkq/ravelRy/blob/master/man/example_files/example_eda.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this example&lt;/a&gt; by the ravelRy package author, &lt;a href=&#34;https://www.kaylinpavlik.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kaylin Pavlik&lt;/a&gt;. I used colors from &lt;a href=&#34;https://edwinth.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Edwin Thoen&lt;/a&gt;&amp;rsquo;s R package,  &lt;a href=&#34;https://github.com/EdwinTh/dutchmasters&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dutchmasters&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Housing Density in US Cities</title>
      <link>lizroten.com/blog/housing-density-in-us-cities/</link>
      <pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate>
      <guid>lizroten.com/blog/housing-density-in-us-cities/</guid>
      <description>&lt;script src=&#34;lizroten.com/blog/housing-density-in-us-cities/index.en_files/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;lizroten.com/blog/housing-density-in-us-cities/index.en_files/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;lizroten.com/blog/housing-density-in-us-cities/index.en_files/datatables-css/datatables-crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;lizroten.com/blog/housing-density-in-us-cities/index.en_files/datatables-binding/datatables.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;lizroten.com/blog/housing-density-in-us-cities/index.en_files/dt-core/css/jquery.dataTables.min.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;link href=&#34;lizroten.com/blog/housing-density-in-us-cities/index.en_files/dt-core/css/jquery.dataTables.extra.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;lizroten.com/blog/housing-density-in-us-cities/index.en_files/dt-core/js/jquery.dataTables.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;lizroten.com/blog/housing-density-in-us-cities/index.en_files/crosstalk/css/crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;lizroten.com/blog/housing-density-in-us-cities/index.en_files/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;Since I got back from #rstudioconf, Iâve started to warm up to the idea of sharing my code, even if it isnât perfect. There may be typos, the blog post may be short, but sharing my work is beneficial for the greater #rstats community, and supports open-source data science.&lt;/p&gt;
&lt;p&gt;So this belated post is inspired by &lt;a href=&#34;https://www.nytimes.com/interactive/2019/06/18/upshot/cities-across-america-question-single-family-zoning.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cities Start to Question an American Ideal: A House With a Yard on Every Lot&lt;/a&gt;, in which the NY Times examines residential zoning patterns in different cities. Residential areas are split into two categories, single-family detached homes and all other housing such as townhomes, duplexes, and apartments. This is especially relevant given the current housing shortage across the US.&lt;/p&gt;
&lt;h2 id=&#34;import-data&#34;&gt;Import data&lt;/h2&gt;
&lt;p&gt;First, lets import our packages.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# spatial packages 
library(sf)
library(geojsonsf)
library(rgdal)
library(lwgeom)

# data cleaning
library(dplyr)
library(janitor)
library(fuzzyjoin)
library(stringr)

# plotting
library(ggplot2)
library(showtext)
library(DT)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, lets import our data. &lt;code&gt;read_sf()&lt;/code&gt; is super useful here, because it will read in an &lt;code&gt;sf&lt;/code&gt; object from a link to the spatial file we want. In this case, the link comes from each cityâs open data portal&lt;/p&gt;
&lt;p&gt;When you go to the data portal and find the dataset you want, right click the link to download the GeoJSON and copy the link. Then, paste it into &lt;code&gt;read_sf()&lt;/code&gt; and youâre good to go! Say goodbye to massive data folders!&lt;/p&gt;
&lt;p&gt;For this post, Iâve chosen (somewhat randomly) &lt;a href=&#34;https://data.wprdc.org/dataset/zoning1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pittsburgh, PA&lt;/a&gt;, &lt;a href=&#34;https://data.austintexas.gov/Locations-and-Maps/Land-Use-Inventory-Detailed/fj9m-h5qy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Austin, TX&lt;/a&gt;, and &lt;a href=&#34;https://data.boston.gov/dataset/zoning-subdistricts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Boston, MA&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pitts &amp;lt;- read_sf(&amp;quot;http://pghgis-pittsburghpa.opendata.arcgis.com/datasets/e67592c2904b497b83ccf876fced7979_0.geojson&amp;quot;)

boston &amp;lt;- read_sf(&amp;quot;http://bostonopendata-boston.opendata.arcgis.com/datasets/b601516d0af44d1c9c7695571a7dca80_0.geojson?outSR={%22latestWkid%22:2249,%22wkid%22:102686}&amp;quot;)

austin &amp;lt;- read_sf(&amp;quot;https://data.austintexas.gov/api/geospatial/5rzy-nm5e?method=export&amp;amp;format=GeoJSON&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the styling Iâm using on the maps.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;showtext_auto()

font_add(&amp;quot;Lato&amp;quot;, &amp;quot;Lato-Regular.ttf&amp;quot;)
font_add(&amp;quot;Open Sans Light&amp;quot;, &amp;quot;OpenSans-Light.ttf&amp;quot;)
font_add(&amp;quot;PT Sans&amp;quot;, &amp;quot;PTSans-Regular.ttf&amp;quot;)
font_add(&amp;quot;PT Serif&amp;quot;, &amp;quot;PTSerif-Regular.ttf&amp;quot;)


## font sizes --------------------------------------------
size_header &amp;lt;- 14*3.4
size_subtitle &amp;lt;- 12*3.4
size_axis_title &amp;lt;- 12*3.4
size_legend_title &amp;lt;- 12*3.4
size_axis_text &amp;lt;- 8*3.4
size_legend_text &amp;lt;- 8*3.4
size_caption &amp;lt;- 6*3.4

## color -------------------------------------------------
background_color &amp;lt;- &amp;quot;#ffffff&amp;quot;

blue &amp;lt;- &amp;quot;#66b2a9&amp;quot;
pink &amp;lt;- &amp;quot;#dd2292&amp;quot;

my_colors &amp;lt;- c(
  &amp;quot;#9BABBF&amp;quot;,
  &amp;quot;#8C694A&amp;quot;,
  &amp;quot;#6C733C&amp;quot;,
  &amp;quot;#D9B991&amp;quot;
)
## theme function -----------------------------------------
my_theme &amp;lt;- function(...) {
  theme_void() +
    theme(
      ### plot and panel-----------------------------------
      plot.background = element_rect(
        fill = background_color,
        linetype = 0,
        colour = NA
      ),
      panel.background = element_rect(
        fill = background_color,
        linetype = 0,
        color = NA
      ),
      panel.grid = element_blank(),
      plot.margin = margin(rep(10, 4), unit = &amp;quot;pt&amp;quot;),
      panel.border = element_blank(),
      ### title and caption -------------------------------
      title = element_text(family = &amp;quot;PT Serif&amp;quot;,
                           size = size_header),
      plot.caption = element_text(size = size_caption),
      # plot.caption.position = &amp;quot;plot&amp;quot;,
      ### axis and strip text ------------------------------
      strip.text = element_blank(),
      axis.title = element_text(size = size_axis_title),
      axis.text = element_blank(),
      ## legend text ----------------------------------------
      legend.text = element_text(
        family = &amp;quot;Open Sans Light&amp;quot;,
        size = size_legend_text
      )
      # legend.position = &amp;quot;bottom&amp;quot;
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;investigate-cities&#34;&gt;Investigate cities&lt;/h2&gt;
&lt;h3 id=&#34;pittsburgh&#34;&gt;Pittsburgh&lt;/h3&gt;
&lt;p&gt;So, what are our column names?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(pitts)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;objectid&amp;quot;         &amp;quot;area&amp;quot;             &amp;quot;perimeter&amp;quot;        &amp;quot;zoning_&amp;quot;         
##  [5] &amp;quot;zoning_id&amp;quot;        &amp;quot;zon_new&amp;quot;          &amp;quot;shape_leng&amp;quot;       &amp;quot;correctionlabel&amp;quot; 
##  [9] &amp;quot;full_zoning_type&amp;quot; &amp;quot;legendtype&amp;quot;       &amp;quot;municode&amp;quot;         &amp;quot;status&amp;quot;          
## [13] &amp;quot;created_user&amp;quot;     &amp;quot;created_date&amp;quot;     &amp;quot;last_edited_user&amp;quot; &amp;quot;last_edited_date&amp;quot;
## [17] &amp;quot;Shape__Area&amp;quot;      &amp;quot;Shape__Length&amp;quot;    &amp;quot;geometry&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are most interested in the âlegendtypeâ column.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unique(pitts$legendtype)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Parks&amp;quot;                            &amp;quot;Local Neighborhood Commercial &amp;quot;  
##  [3] &amp;quot;Highway Commercial&amp;quot;               &amp;quot;Single-Unit Detached Residential&amp;quot;
##  [5] &amp;quot;Urban Industrial&amp;quot;                 &amp;quot;Planned Unit Development&amp;quot;        
##  [7] &amp;quot;Neighborhood Industrial&amp;quot;          &amp;quot;Two-Unit Residential&amp;quot;            
##  [9] &amp;quot;Multi-Unit Residential&amp;quot;           &amp;quot;Hillside  &amp;quot;                      
## [11] &amp;quot;Single-Unit Attached Residential&amp;quot; &amp;quot;Mount Oliver Borough&amp;quot;            
## [13] &amp;quot;Three-Unit Residential&amp;quot;           &amp;quot;General Industrial  &amp;quot;            
## [15] &amp;quot;Oakland Public Realm&amp;quot;             &amp;quot;Specially Planned&amp;quot;               
## [17] &amp;quot;Golden Triangle &amp;quot;                 &amp;quot;Neighborhood Office&amp;quot;             
## [19] &amp;quot;Educational/Medical Institution&amp;quot;  &amp;quot;Urban Neighborhood Commercial&amp;quot;   
## [21] &amp;quot;Grandview Public Realm&amp;quot;           &amp;quot;Uptown Public Realm&amp;quot;             
## [23] &amp;quot;Riverfront&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are useful descriptions! We will re-code them into three categories: single-family detached, not single-family detached, and non-residential.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pitts_clean &amp;lt;- pitts %&amp;gt;% 
  rowwise() %&amp;gt;% 
  mutate(zone_simple = if(legendtype %in% c(&amp;quot;Single-Unit Attached Residential&amp;quot;,
                                            &amp;quot;Two-Unit Residential&amp;quot;, 
                                            &amp;quot;Three-Unit Residential&amp;quot;,
                                            &amp;quot;Multi-Unit Residential&amp;quot;)){
    zone_simple = &amp;quot;non_sfd&amp;quot;
  } else if (legendtype == &amp;quot;Single-Unit Detached Residential&amp;quot;){
    zone_simple = &amp;quot;sfd&amp;quot;
  } else {
    zone_simple = &amp;quot;non_res&amp;quot;
  }) %&amp;gt;% 
  st_as_sf()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now for the map!&lt;/p&gt;
&lt;p&gt;For the caption, we can take advantage of the âlast_edited_dateâ column and automatically put in the correct date!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot() +
  geom_sf(data = pitts_clean,
          aes(fill = zone_simple),
          color = &amp;quot;#C8C8C8&amp;quot;,
          size = 0.2,
          alpha = 0.5) +
  labs(title = &amp;quot;Pittsburgh&amp;quot;,
       subtitle = &amp;quot;Residential zoning&amp;quot;,
       fill = &amp;quot;&amp;quot;,
       caption = paste(&amp;quot;@LizRoten | City of Pittsburgh,&amp;quot;,
                       lubridate::year(pitts_clean$last_edited_date))) + 
  my_theme() +
  scale_fill_manual(values = c(&amp;quot;whitesmoke&amp;quot;, blue, pink),
                    labels = c(&amp;quot;Non-residential&amp;quot;,
                               &amp;quot;Non-single family&amp;quot;,
                               &amp;quot;Single family&amp;quot;)) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/housing-density-in-us-cities/index.en_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This map looks like its missing something, so Iâm going to add in &lt;a href=&#34;https://data.wprdc.org/dataset/allegheny-county-hydrology-areas&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hydrology features.&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# import &amp;quot;Allegheny County Hydrology Areas&amp;quot; 

pitt_water &amp;lt;- read_sf(&amp;quot;http://openac-alcogis.opendata.arcgis.com/datasets/9ff3941e47f74c609057cb60f4992852_0.geojson&amp;quot;) %&amp;gt;% 
  sf::st_make_valid() %&amp;gt;% 
  st_intersection(sf::st_make_valid(pitts)) # instersect with city limits
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot() +
  geom_sf(data = pitts_clean,
          aes(fill = zone_simple),
          color = &amp;quot;#C8C8C8&amp;quot;,
          size = 0.2,
          alpha = 0.5) +
  labs(title = &amp;quot;Pittsburgh&amp;quot;,
       subtitle = &amp;quot;Residential zoning&amp;quot;,
       fill = &amp;quot;&amp;quot;,
       caption = paste(&amp;quot;@LizRoten | City of Pittsburgh,&amp;quot;,
                       format(pitts_clean$last_edited_date, &amp;quot;%Y&amp;quot;))) + 
  my_theme() +
  scale_fill_manual(values = c(&amp;quot;whitesmoke&amp;quot;, blue, pink),
                    labels = c(&amp;quot;Non-residential&amp;quot;,
                               &amp;quot;Non-single family&amp;quot;,
                               &amp;quot;Single family&amp;quot;)) +
  geom_sf(data = pitt_water,
          fill = &amp;quot;lightblue&amp;quot;, 
          color = &amp;quot;NA&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/housing-density-in-us-cities/index.en_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;austin&#34;&gt;Austin&lt;/h3&gt;
&lt;p&gt;Lets look at the column names for Austin.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(austin)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;created_by&amp;quot;    &amp;quot;shape_area&amp;quot;    &amp;quot;created_date&amp;quot;  &amp;quot;zoning_ztype&amp;quot; 
##  [5] &amp;quot;objectid&amp;quot;      &amp;quot;shape_length&amp;quot;  &amp;quot;modified_by&amp;quot;   &amp;quot;modified_date&amp;quot;
##  [9] &amp;quot;zoning_id&amp;quot;     &amp;quot;geometry&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we can look at âzoning_ztype.â&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(unique(austin$zoning_ztype))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;SF-2-CO&amp;quot;  &amp;quot;SF-3-NP&amp;quot;  &amp;quot;MF-2-NP&amp;quot;  &amp;quot;PUD&amp;quot;      &amp;quot;GR&amp;quot;       &amp;quot;CS-MU-NP&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;YIKES. Looks like we need a data dictionary.&lt;/p&gt;
&lt;p&gt;I would love to say that I elegantly extracted the zoning codes from the &lt;a href=&#34;http://www.austintexas.gov/page/zoning-districts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cityâs website&lt;/a&gt;, but I ended up copying the HTML table to Excel and manipulating the columns from there. The text-to-columns tool is very useful fo instances like this. I also added codes âSF-4â and âMF,â which werenât explicitly provided.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;austin_desc &amp;lt;- read.csv(&amp;quot;data/zoning_descriptions.csv&amp;quot;) %&amp;gt;% 
  clean_names()

DT::datatable(austin_desc, rownames = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:auto;&#34; class=&#34;datatables html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;filter&#34;:&#34;none&#34;,&#34;data&#34;:[[&#34;LA&#34;,&#34;SF-4B&#34;,&#34;MF-1&#34;,&#34;MF-4&#34;,&#34;MH&#34;,&#34;MF-2&#34;,&#34;GO&#34;,&#34;GR&#34;,&#34;DMU&#34;,&#34;CS-1&#34;,&#34;MI&#34;,&#34;DR&#34;,&#34;PUD&#34;,&#34;NBG&#34;,&#34;MF-5&#34;,&#34;SF-6&#34;,&#34;MF-3&#34;,&#34;MF-6&#34;,&#34;MF&#34;,&#34;NO&#34;,&#34;CR&#34;,&#34;L&#34;,&#34;W/LO&#34;,&#34;CH&#34;,&#34;LI&#34;,&#34;AV&#34;,&#34;P&#34;,&#34;ERC&#34;,&#34;SF-2&#34;,&#34;RR&#34;,&#34;SF-3&#34;,&#34;SF-5&#34;,&#34;SF-1&#34;,&#34;SF-4&#34;,&#34;LO&#34;,&#34;LR&#34;,&#34;CBD&#34;,&#34;CS&#34;,&#34;IP&#34;,&#34;R&amp;amp;D&#34;,&#34;AG&#34;,&#34;TOD&#34;,&#34;TND&#34;,&#34;CO&#34;,&#34;NCCD&#34;,&#34;CVC&#34;,&#34;PDA&#34;,&#34;WO&#34;,&#34;MU&#34;,&#34;CURE&#34;,&#34;CDZ&#34;,&#34;CAZ&#34;,&#34;PSZ&#34;,&#34;DPZ&#34;,&#34;DCZ&#34;,&#34;SF-4A&#34;],[&#34;Lake Austin Residence   &#34;,&#34;Single Family Residence - Condominium &#34;,&#34;Multi-Family Residence - Limited Density &#34;,&#34;Multi-Family Residence - Moderate-High Density &#34;,&#34;Mobile Home Residence   &#34;,&#34;Multi-Family Residence - Low Density &#34;,&#34;General Office    &#34;,&#34;Community Commercial    &#34;,&#34;Downtown Mixed Use   &#34;,&#34;Commercial-Liquor Sales    &#34;,&#34;Major Industry    &#34;,&#34;Development Reserve    &#34;,&#34;Planned Unit Development   &#34;,&#34;North Burnet/Gateway District   &#34;,&#34;Multi-Family Residence - High Density &#34;,&#34;Townhouse &amp;amp; Condominium Residence  &#34;,&#34;Multi-Family Residence - Medium Density &#34;,&#34;Multi-Family Residence - Highest Density &#34;,&#34;Multifamily Residence&#34;,&#34;Neighborhood Office    &#34;,&#34;Commercial Recreation    &#34;,&#34;Lake Commercial    &#34;,&#34;Warehouse Limited Office   &#34;,&#34;Commercial Highway    &#34;,&#34;Limited Industrial Services   &#34;,&#34;Aviation Services    &#34;,&#34;Public     &#34;,&#34;East Riverside Corridor   &#34;,&#34;Single Family Residence - Standard Lot&#34;,&#34;Rural Residence    &#34;,&#34;Family Residence    &#34;,&#34;Urban Family Residence   &#34;,&#34;Single Family Residence - Large Lot&#34;,&#34;Single Family Residence&#34;,&#34;Limited Office    &#34;,&#34;Neighborhood Commercial    &#34;,&#34;Central Business District   &#34;,&#34;General Commercial Services   &#34;,&#34;Industrial Park    &#34;,&#34;Research and Development   &#34;,&#34;Agricultural     &#34;,&#34;Transit-Oriented Development    &#34;,&#34;Traditional Neighborhood District   &#34;,&#34;Conditional overlay&#34;,&#34;Neighborhood Conservation Combining District &#34;,&#34;Capitol View Corridor Combining District &#34;,&#34;Planned Development Area Combining District&#34;,&#34;Waterfront Overlay Combining District&#34;,&#34;Mixed Use&#34;,&#34;Central Urban Redevelopment&#34;,&#34;Capitol Dominance Combining District&#34;,&#34;Congress Avenue Combining District&#34;,&#34;Sixth/Pecan Street Combining District&#34;,&#34;Downtown Parks Combining District&#34;,&#34;Downtown Creeks Combining District&#34;,&#34;Single Family Residence - Small Lot&#34;]],&#34;container&#34;:&#34;&lt;table class=\&#34;display\&#34;&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;code&lt;\/th&gt;\n      &lt;th&gt;description&lt;\/th&gt;\n    &lt;\/tr&gt;\n  &lt;\/thead&gt;\n&lt;\/table&gt;&#34;,&#34;options&#34;:{&#34;order&#34;:[],&#34;autoWidth&#34;:false,&#34;orderClasses&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;We are going to break up Austin into two separate datasets: one with residential zones, and the other with non-residential zones.&lt;/p&gt;
&lt;p&gt;We will join our spatial data with the code descriptions using âzoning_ztype,â then add a column for residential zoning type using &lt;code&gt;str_detect()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;austin_w_desc &amp;lt;- left_join(austin, 
                           austin_desc,
                           by = c(&amp;quot;zoning_ztype&amp;quot; = &amp;quot;code&amp;quot;))

austin_coded &amp;lt;- austin_w_desc %&amp;gt;% 
  group_by(objectid) %&amp;gt;% 
  mutate(residence_zone = # detect key character sequences and add 
           case_when(stringr::str_detect(zoning_ztype, &amp;quot;SF&amp;quot;) ~ &amp;quot;Single family&amp;quot;,
                     stringr::str_detect(zoning_ztype, &amp;quot;MH&amp;quot;) ~ &amp;quot;Non-single family&amp;quot;,
                     stringr::str_detect(zoning_ztype, &amp;quot;MF&amp;quot;) ~ &amp;quot;Non-single family&amp;quot;,
                     stringr::str_detect(zoning_ztype, &amp;quot;LA&amp;quot;) ~ &amp;quot;Non-single family&amp;quot;,
                     stringr::str_detect(zoning_ztype, &amp;quot;RR&amp;quot;) ~ &amp;quot;Non-single family&amp;quot;,
                     TRUE ~ &amp;quot;Non-residential&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, lets map it! I adjusted the fill color for non-residential zones because the scale is much smaller than Pittsburgh.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot()  +
  geom_sf(data = austin_coded,
          mapping = aes(fill = residence_zone),
          color = NA,
          alpha = 0.5) +
  scale_fill_manual(values = c(&amp;quot;snow3&amp;quot;, blue, pink),
                    labels = c(&amp;quot;Non-residential&amp;quot;,
                               &amp;quot;Non-single family&amp;quot;,
                               &amp;quot;Single family&amp;quot;)) +
  labs(title = &amp;quot;Austin&amp;quot;,
       subtitle = &amp;quot;Residential zoning&amp;quot;,
       fill = &amp;quot;&amp;quot;,
       caption = paste(&amp;quot;@LizRoten | City of Austin,&amp;quot;,
                       format(austin_coded$modified_date, &amp;quot;%Y&amp;quot;))) +
  my_theme()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/housing-density-in-us-cities/index.en_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;boston&#34;&gt;Boston&lt;/h3&gt;
&lt;p&gt;Lets check our column names.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(boston) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;OBJECTID&amp;quot;         &amp;quot;ZONE_&amp;quot;            &amp;quot;DISTRICT&amp;quot;         &amp;quot;MAPNO&amp;quot;           
##  [5] &amp;quot;ARTICLE&amp;quot;          &amp;quot;SUBDISTRIC&amp;quot;       &amp;quot;Unique_Code&amp;quot;      &amp;quot;FAR&amp;quot;             
##  [9] &amp;quot;Shape_STArea__&amp;quot;   &amp;quot;Shape_STLength__&amp;quot; &amp;quot;Zone_Desc&amp;quot;        &amp;quot;geometry&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then the âZone_Descâ column.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(unique(boston$Zone_Desc))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Community Commercial&amp;quot;          &amp;quot;Waterfront Manufacturing&amp;quot;     
## [3] &amp;quot;Restricted Manufacturing&amp;quot;      &amp;quot;Neighborhood Development Area&amp;quot;
## [5] &amp;quot;Local Industrial&amp;quot;              &amp;quot;Waterfront Commercial&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;HA! Sweet, sweet human-readable descriptions!&lt;/p&gt;
&lt;p&gt;To make things a little easier, we can break out the entire dataset into residential and non-residential groups, and then &lt;code&gt;rbind()&lt;/code&gt; them back together.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boston_res &amp;lt;- boston %&amp;gt;% 
  filter(SUBDISTRIC == &amp;quot;Residential&amp;quot;) %&amp;gt;% 
  rowwise() %&amp;gt;% 
  mutate(category = if(Zone_Desc == &amp;quot;One-Family Residential&amp;quot;){
    category = &amp;quot;Single Family&amp;quot;
  } else {
    category = &amp;quot;Non-single family&amp;quot;
  }) %&amp;gt;% 
  st_as_sf()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now create the non-residential and bind the two back together.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boston_non_res &amp;lt;- boston %&amp;gt;% 
  filter(SUBDISTRIC != &amp;quot;Residential&amp;quot;, 
         SUBDISTRIC != &amp;quot;Open Space&amp;quot;, # remove primarily water features
         DISTRICT != &amp;quot;Boston Harbor&amp;quot;,
         DISTRICT != &amp;quot;Harborpark: Dorchester Bay/Neponset River Waterfront&amp;quot;) %&amp;gt;% 
  mutate(category = &amp;quot;Non-residential&amp;quot;)


boston_all &amp;lt;- rbind(boston_res, boston_non_res)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, map!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot()  +
  geom_sf(data = boston_all,
          mapping = aes(fill = category),
          color = &amp;quot;#c8c8c8&amp;quot;,
          size = 0.1, 
          alpha = 0.5) +
  scale_fill_manual(values = c(&amp;quot;snow3&amp;quot;, blue, pink),
                    labels = c(&amp;quot;Non-residential&amp;quot;,
                               &amp;quot;Non-single family&amp;quot;,
                               &amp;quot;Single family&amp;quot;)) +
  labs(title = &amp;quot;Boston&amp;quot;,
       subtitle = &amp;quot;Residential zoning&amp;quot;,
       fill = &amp;quot;&amp;quot;,
       caption = &amp;quot;@LizRoten | City of Boston, 2020&amp;quot;) +
  my_theme()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/housing-density-in-us-cities/index.en_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fisk&#39;s &#39;Mississippi River Meander&#39; in R</title>
      <link>lizroten.com/blog/fisk-s-mississippi-river-meander-in-r/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +0000</pubDate>
      <guid>lizroten.com/blog/fisk-s-mississippi-river-meander-in-r/</guid>
      <description>&lt;script src=&#34;lizroten.com/blog/fisk-s-mississippi-river-meander-in-r/index.en_files/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;lizroten.com/blog/fisk-s-mississippi-river-meander-in-r/index.en_files/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;lizroten.com/blog/fisk-s-mississippi-river-meander-in-r/index.en_files/datatables-css/datatables-crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;lizroten.com/blog/fisk-s-mississippi-river-meander-in-r/index.en_files/datatables-binding/datatables.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;lizroten.com/blog/fisk-s-mississippi-river-meander-in-r/index.en_files/dt-core/css/jquery.dataTables.min.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;link href=&#34;lizroten.com/blog/fisk-s-mississippi-river-meander-in-r/index.en_files/dt-core/css/jquery.dataTables.extra.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;lizroten.com/blog/fisk-s-mississippi-river-meander-in-r/index.en_files/dt-core/js/jquery.dataTables.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;lizroten.com/blog/fisk-s-mississippi-river-meander-in-r/index.en_files/crosstalk/css/crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;lizroten.com/blog/fisk-s-mississippi-river-meander-in-r/index.en_files/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;Those of us even mildly obsessed with maps will be familiar with Harold Fiskâs 1944 series documenting the historic travel of the Mississippi River in Mississippi River Alluvial Valley. In my house in college, filled with geography majors and map enthusiasts, we had a small print hung on the wall, and it was easy to start reading it, and end up standing there, just staring, for quite a while.&lt;/p&gt;
&lt;p&gt;Even viewing on a screen, its easy to see how you can get lost in the map. The colors are distinct and vivid, and the contextual information, like political boundaries and fault lines, against the aged sepia base do not distract. The map is dynamic, with irregular shapes and curves. If not done right, the messiness could overwhelm the viewer, but Fisk succeeds in capturing the audienceâs attention. The content itself makes you reconsider your relationship with this body of water. Seeing how it has moved and changed course over time reminds you of how small, short and insignificant our lives can be compared to the Earthâs natural history.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.atlasofplaces.com/atlas-of-places-images/_scaled/ATLAS-OF-PLACES-ARMY-CORPS-OF-ENGINEERS-MISSISSIPPI-RIVER-MEANDER-BELT-GPH-7.jpg&#34; alt=&#34;âAlluvial Valley of the Lower Mississippi River by Harold Fisk, 1944â courtesy of Atlas of Places&#34;&gt;&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;adore&lt;/em&gt; this map. I wonât attempt to fully recreate it here, but I want to explore the data behind it, and see what I can find.&lt;/p&gt;
&lt;h2 id=&#34;prep&#34;&gt;Prep&lt;/h2&gt;
&lt;p&gt;Lets load in packages I know Iâll need.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rgdal)
library(dplyr)
library(sf)
library(ggplot2)
library(leaflet)
library(xml2)
library(data.table)
library(raster)
library(ggrepel)
library(stringr)
library(ggmap)
library(tidycensus)
library(cowplot)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To start, I studied the map and did an inventory of the elements.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;State lines&lt;/li&gt;
&lt;li&gt;Elevation&lt;/li&gt;
&lt;li&gt;Mississippi River&lt;/li&gt;
&lt;li&gt;Rivers other than the Mississippi&lt;/li&gt;
&lt;li&gt;County lines&lt;/li&gt;
&lt;li&gt;Cut offs (neck, chute, and fault)&lt;/li&gt;
&lt;li&gt;Lakes&lt;/li&gt;
&lt;li&gt;Major landmarks&lt;/li&gt;
&lt;li&gt;Flood areas&lt;/li&gt;
&lt;li&gt;Much more!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I was having difficulty working with raster elevation data, so I decided to save that for another day. However, there is a dataset from a 1994 study by Roger T. Saucier, âGeomorphology and Quaternary Geologic History of the Lower Mississippi Valley, Volumes I and II.â The United States Geological Survey (USGS) developed both georeferenced plates and vector shapefiles. I downloaded both the datasets from the &lt;a href=&#34;https://www.sciencebase.gov/catalog/item/59b7ddd6e4b08b1644df5cf6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;USGS website&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;data-cleaning&#34;&gt;Data cleaning&lt;/h3&gt;
&lt;p&gt;I downloaded the zipped shapefile, so here I unzip the folder, read in the shapefile, and convert it to an &lt;code&gt;sf&lt;/code&gt; object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unzip(&amp;quot;data/gis/Saucier_Geomorph_shapefile.zip&amp;quot;, exdir = &amp;quot;data/gis&amp;quot;)
saucier &amp;lt;- readOGR(&amp;quot;data/gis/Saucier_Geomorph_shapefile/Saucier_Geomorph.shp&amp;quot;) %&amp;gt;% 
  st_as_sf() %&amp;gt;% 
  sf::st_transform(&amp;quot;+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can get a quick idea of what the data looks like with &lt;code&gt;names()&lt;/code&gt; and a simple ggplot.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;names(saucier)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Formation&amp;quot; &amp;quot;Descrip&amp;quot;   &amp;quot;Geo_Age&amp;quot;   &amp;quot;geometry&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot() +
  geom_sf(data = saucier,
          aes(fill = Geo_Age),
          color = NA) +
  labs(fill = &amp;quot;Geologic Age&amp;quot;) +
  scale_fill_brewer(type = &amp;quot;qual&amp;quot;, palette = &amp;quot;Accent&amp;quot;) +
  theme_minimal()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/fisk-s-mississippi-river-meander-in-r/index.en_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Included in the zipped download is an XML metadata file. I can parse it (with some trial and error) to get &lt;code&gt;Formation&lt;/code&gt; and &lt;code&gt;Geo_Age&lt;/code&gt; descriptions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;meta_xml &amp;lt;- read_xml(&amp;quot;data/gis/Saucier_Geomorph_shapefile/Saucier_Geomorph_FGDC.xml&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then take the XML document and manipulate it into a table with only the attributes we need.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;item &amp;lt;- xml_find_all(meta_xml, &amp;quot;//edomv&amp;quot;) %&amp;gt;% xml_text() %&amp;gt;% factor()
item_desc &amp;lt;- xml_find_all(meta_xml, &amp;quot;//edomvd&amp;quot;) %&amp;gt;% xml_text() %&amp;gt;% as.character()

meta_table &amp;lt;- data.table::data.table(item, item_desc) %&amp;gt;% 
  unique() %&amp;gt;% 
  filter(nchar(item_desc) &amp;gt; 14)


DT::datatable(meta_table,
              rownames = FALSE,
              colnames = c(&amp;quot;Formation/Geo_Age&amp;quot;, 
                           &amp;quot;description&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:auto;&#34; class=&#34;datatables html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;filter&#34;:&#34;none&#34;,&#34;data&#34;:[[&#34;Had&#34;,&#34;Hal&#34;,&#34;Hb&#34;,&#34;Hc&#34;,&#34;Hchm&#34;,&#34;Hcom&#34;,&#34;Hcom-Projected&#34;,&#34;Hcp&#34;,&#34;Hdi&#34;,&#34;Hdlp&#34;,&#34;Hds&#34;,&#34;Hnl&#34;,&#34;Hp&#34;,&#34;Hpu&#34;,&#34;Pdch&#34;,&#34;Pdp&#34;,&#34;Pdu&#34;,&#34;Pi&#34;,&#34;Plm&#34;,&#34;Ppch&#34;,&#34;Ppp&#34;,&#34;Ppu&#34;,&#34;Ps&#34;,&#34;Ptc&#34;,&#34;Ptu&#34;,&#34;Pvcl&#34;,&#34;Pve&#34;,&#34;Pvl&#34;,&#34;RiverTrack&#34;,&#34;Holocene&#34;,&#34;Holocene (Alluvial Valley)&#34;,&#34;Holocene (Deltaic and Chenier Plains)&#34;,&#34;Pleistocene&#34;],[&#34;Principal abandoned deltaic distributaries. Distributaries grouped together and not separately delineated.&#34;,&#34;Undifferentiated alluvium of small streams.&#34;,&#34;Backswamp (floodbasin) deposits.&#34;,&#34;Cheniers and relict beach ridges.&#34;,&#34;Abandoned channels (neck and chute cutoffs) of the Mississippi River.&#34;,&#34;Abandoned courses of the Mississippi River. Projected where removed by later subsequent small streams. Includes trunk channels of major delta complexes.&#34;,&#34;Projected where removed by lateral migration of subsequent small streams. Includes trunk channels of major delta complexes.&#34;,&#34;Undifferentiated paludal deposits of chenier plain. Represents brackish to saline marsh environments.&#34;,&#34;Interdistributary deposits. Represents brackish to saline marsh environments.&#34;,&#34;Lacustrine and lacustrine deltaic deposits of the Atchafalaya Basin.&#34;,&#34;Inland swamp deposits. Represents freshwater swamp environment.&#34;,&#34;Natural levees in deltaic plain associated with major distributaries and present Mississippi River. Natural levees that overlie interdistributary and other deltaic deposits, but not point bar deposits, are grouped together and not separately delineated.&#34;,&#34;Point bar (meander scroll) deposits of Mississippi River, Arkansas River, Red River, and small streams. Meander belts of Arkansas, Mississippi, and Red Rivers are grouped together and not separately delineated.&#34;,&#34;Point bar (meander scroll) and associated deposits of meander belts buried by backswamp deposits.&#34;,&#34;Abandoned channels (cutoffs) of the Deweyville Complex.&#34;,&#34;Point bar (meander scroll) deposits of the Deweyville Complex.&#34;,&#34;Undifferentiated fluvial deposits of the Deweyville Complex.&#34;,&#34;Undifferentiated fluvial deposits of the Intermediate Complex.&#34;,&#34;Lacustrine deposits of the Deweyville (Lake Monroe) Complex. Levels are grouped together and not separately delineated.&#34;,&#34;Abandoned channels (cutoffs) and short segments of Mississippi River abandoned courses of the Prarie Complex. Probable Wisconsin Stage.&#34;,&#34;Point bar (meander scroll) deposits of Mississippi River origin of the Prarie Complex. Probable Wisconsin Stage. Levels are grouped together and not separately delineated.&#34;,&#34;Undifferentiated fluvial deposits of the Prairie Complex. Mostly natural levee and backswamp deposits of Mississippi, Arkansas, Red Rivers. Levels are grouped together and not separately delineated.&#34;,&#34;Sand dune fields and eolian deposits on valley trains.&#34;,&#34;Undifferentiated fluvial deposits of the Cache River terrace.&#34;,&#34;Undifferentiated fluvial deposits of probable Early Wisconsin Stage or earlier age.&#34;,&#34;Relict channels of Late Wisconsin Stage valley train. Levels are grouped together and not separately delineated.&#34;,&#34;Early Wisconsin Stage valley train. Interfluves and relict channels not separately delineated. Levels are grouped together and not separately delineated.&#34;,&#34;Late Wisconsin Stage valley train. Includes both interfluve and relict channels unless channels delineated separately. Levels are grouped together and not separately delineated.&#34;,&#34;Historic river tracks of the Mississippi River, Arkansas River, and oxbow lakes within the Lower Mississippi. Does not represent current river tracks nor current oxbow lakes.&#34;,&#34;Position of river in 1994.&#34;,&#34;Upland remnants of Tertiary age and terraces and ridges of Wisconsin and pre-Wisconsin age serve to subdivide the Mississippi alluvial valley into six major lowlands; each basin is a true topographic depression and definable hydrologic unit with a bounding interfluve; drainage is from north to south into a major collecting stream.&#34;,&#34;Landforms within the deltaic and chenier plains that are as little as 5 to 10 ft above the surrounding landscape are often visible for miles, and a difference in elevation of inches may mean the difference between marsh and forest vegetation; features within the northern limit are piercement-type salt dome; abandoned distributaries are topographically prominent of the deltaic plain, but cheniers fill this role in the chenier plain.&#34;,&#34;Quaternary features part of the Pleistocene epoch.&#34;]],&#34;container&#34;:&#34;&lt;table class=\&#34;display\&#34;&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Formation/Geo_Age&lt;\/th&gt;\n      &lt;th&gt;description&lt;\/th&gt;\n    &lt;\/tr&gt;\n  &lt;\/thead&gt;\n&lt;\/table&gt;&#34;,&#34;options&#34;:{&#34;order&#34;:[],&#34;autoWidth&#34;:false,&#34;orderClasses&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;To keep everything straight, I join this table with our &lt;code&gt;sf&lt;/code&gt; object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;saucier_meta &amp;lt;- saucier %&amp;gt;% 
  dplyr::left_join(meta_table, by = c(&amp;quot;Formation&amp;quot; = &amp;quot;item&amp;quot;)) %&amp;gt;% 
  dplyr::left_join(meta_table, by = c(&amp;quot;Geo_Age&amp;quot; = &amp;quot;item&amp;quot;)) %&amp;gt;% 
  dplyr::select(-item_desc.x) %&amp;gt;% 
  st_as_sf()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I also downloaded a recent shapefile of the Mississippi River in the state of &lt;a href=&#34;https://www.maris.state.ms.us/HTML/DATA/data_Hydrology/MississippiRiver.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mississippi&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ms_r_1983 &amp;lt;- readOGR(&amp;quot;data/gis/ms_r/ms_r.shp&amp;quot;) %&amp;gt;%
  st_as_sf() %&amp;gt;%
  sf::st_transform(&amp;quot;+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I then saved my own &lt;code&gt;{gggplot2}&lt;/code&gt; theme object and a few colors. Notice that I establish the font sizes all in one place, which makes it much easier to make small adjustments that will affect multiple aspects. I adjusted this theme frequently as I went along (I didnât magically find all the right adjustments in one shot ð).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(showtext)
showtext_auto()
file &amp;lt;- sysfonts::font_files()

font_add(&amp;quot;Lato&amp;quot;, &amp;quot;Lato-Regular.ttf&amp;quot;)
font_add(&amp;quot;Open Sans Light&amp;quot;, &amp;quot;OpenSans-Light.ttf&amp;quot;)
font_add(&amp;quot;Open Sans Light Italic&amp;quot;, &amp;quot;OpenSans-LightItalic.ttf&amp;quot;)
font_add(&amp;quot;PT Sans&amp;quot;, &amp;quot;PTSans-Regular.ttf&amp;quot;)
font_add(&amp;quot;PT Serif&amp;quot;, &amp;quot;PTSerif-Regular.ttf&amp;quot;)


## font sizes --------------------------------------------
size_header &amp;lt;- 14 * 3.4
size_axis_title &amp;lt;- 12* 3.4
size_legend_title &amp;lt;- 12* 3.4
size_axis_text &amp;lt;- 8* 3.4
size_legend_text &amp;lt;- 8* 3.4
size_caption &amp;lt;- 6* 3.4

## color -------------------------------------------------
background_color &amp;lt;- &amp;quot;white&amp;quot;

my_colors &amp;lt;- c(
  &amp;quot;#9BABBF&amp;quot;,
  &amp;quot;#8C694A&amp;quot;,
  &amp;quot;#6C733C&amp;quot;,
  &amp;quot;#D9B991&amp;quot;
)
## theme function -----------------------------------------
my_theme &amp;lt;- function(...) {
  theme_void() +
    theme(
      ### plot and panel-----------------------------------
      plot.background = element_rect(
        fill = background_color,
        linetype = 0,
        colour = NA
      ),
      panel.background = element_rect(
        fill = background_color,
        linetype = 0,
        color = NA
      ),
      panel.grid = element_blank(),
      # plot.margin = unit(c(.5, .5, .2, .5), &amp;quot;cm&amp;quot;),
      panel.border = element_blank(),
      ### title and caption -------------------------------
      title = element_text(family = &amp;quot;PT Serif&amp;quot;,
                           size = size_header),
      plot.caption = element_text(size = size_caption),
      ### axis and strip text ------------------------------
      strip.text = element_blank(),
      axis.title = element_text(size = size_axis_title),
      axis.text = element_text(size = size_axis_text),
      ## legend text ----------------------------------------
      legend.position = &amp;quot;right&amp;quot;,
      legend.text = element_text(
        family = &amp;quot;Open Sans Light&amp;quot;,
        size = size_legend_text
      )
    )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;explore-geological-ages-and-formations&#34;&gt;Explore geological ages and formations&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=TWcyIpul8OE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Holocene&lt;/a&gt; is our current &lt;a href=&#34;https://en.wikipedia.org/wiki/Holocene&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;geological epoch&lt;/a&gt;. The alluvial valley (or &lt;a href=&#34;https://en.wikipedia.org/wiki/Alluvial_plain&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;alluvial plain&lt;/a&gt;) is created by sediment deposits over the millenia. The soil deposits show where the Mississippiâs floodplain has been over time.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;saucier_holocene &amp;lt;- saucier_meta %&amp;gt;% # all holocene features
  filter(Geo_Age == &amp;quot;Holocene&amp;quot;)

saucier_holocene_alluvial &amp;lt;- saucier_meta %&amp;gt;% # holocene alluvial valley
  filter(Geo_Age == &amp;quot;Holocene (Alluvial Valley)&amp;quot;,
         Formation %in% c(&amp;quot;Hchm&amp;quot;, &amp;quot;Hcom&amp;quot;, &amp;quot;Had&amp;quot;,
                          &amp;quot;Ppch&amp;quot;, 
                          &amp;quot;Pdch&amp;quot;))

ggplot() +
  geom_sf(data = saucier_holocene_alluvial,
          aes(fill = Formation),
          color = NA) +
  geom_sf(data = saucier_holocene,
          color = &amp;quot;#0066ff&amp;quot;) +
  labs(title = &amp;quot;Mississippi River&amp;quot;,
       subtitle = &amp;quot;Holocene and Alluvial Valley&amp;quot;,
       caption = &amp;quot;USGS 2018&amp;quot;) +
  my_theme() +
  theme(axis.text = element_blank())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/fisk-s-mississippi-river-meander-in-r/index.en_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Next, the Pleistocene (aka, the Ice Age). The &lt;a href=&#34;https://en.wikipedia.org/wiki/Pleistocene&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pleistocene&lt;/a&gt; was around 2 million to 11 million years ago.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;saucier_pleistocene &amp;lt;- saucier_meta %&amp;gt;% 
  filter(Geo_Age == &amp;quot;Pleistocene&amp;quot;,
         Formation %in% c(&amp;quot;Hchm&amp;quot;, &amp;quot;Hcom&amp;quot;, &amp;quot;Had&amp;quot;,
                          &amp;quot;Ppch&amp;quot;, &amp;quot;Pdch&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I picked out an area to focus on, so I can make a &lt;code&gt;SpatialPolygons&lt;/code&gt; object to clip the other data to.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;e2 &amp;lt;- as(raster::extent(-91.2678, -90.7281,
                        33.596, 34.25), &amp;quot;SpatialPolygons&amp;quot;) 
proj4string(e2) &amp;lt;- &amp;quot;+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Clip data to close area.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;saucier_holocene_alluvial_close  &amp;lt;- st_intersection(saucier_holocene_alluvial %&amp;gt;% 
                                                      st_make_valid(),
                                                    st_as_sf(e2))
saucier_holocene_close &amp;lt;- st_intersection(saucier_holocene,
                                          st_as_sf(e2))
saucier_pleistocene_close &amp;lt;- st_intersection(saucier_pleistocene,
                                             st_as_sf(e2))
ms_r_close &amp;lt;- st_intersection(ms_r_1983, st_as_sf(e2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can take these close-ups and add a couple text labels with &lt;code&gt;geom_text_repel()&lt;/code&gt; from &lt;a href=&#34;https://github.com/slowkow/ggrepel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggrepel&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot() +
  geom_sf(data = saucier_holocene_alluvial_close,
          color = NA,
          fill = &amp;quot;#b97f74&amp;quot;) +
  geom_text_repel(data = saucier_holocene_alluvial_close[2,],
                  aes(geometry = geometry),
                  stat = &amp;quot;sf_coordinates&amp;quot;,
                  nudge_x = -0.1,
                  nudge_y = 0.2,
                  label = str_wrap(&amp;quot;Abandoned channels and courses&amp;quot;,
                                   width = 15),
                  family = &amp;quot;Open Sans Light Italic&amp;quot;,
                  size = 3
  ) +
  scale_fill_brewer(type = &amp;quot;qual&amp;quot;) +
  geom_sf(data = saucier_holocene_close,
          fill = &amp;quot;#e4d5b6&amp;quot;,
          color = NA) +
  geom_text_repel(data = saucier_holocene_close[1,],
                  aes(geometry = geometry),
                  stat = &amp;quot;sf_coordinates&amp;quot;,
                  nudge_x = -0.1,
                  nudge_y = 0.2,
                  label = str_wrap(&amp;quot;Historical river track&amp;quot;,
                                   width = 15),
                  family = &amp;quot;Open Sans Light Italic&amp;quot;,
                  size = 3 * 3.4
  ) +
  geom_sf(data = ms_r_close,
          inherit.aes = FALSE,
          fill = &amp;quot;#9fa066&amp;quot;,
          color = NA) +
  labs(title = &amp;quot;Mississippi River&amp;quot;,
       subtitle = &amp;quot;Holocene Alluvial Valley&amp;quot;,
       caption = paste0(&amp;quot;USGS 2018, MARIS 1983&amp;quot;)) +
  my_theme() +
  theme(
    axis.text = element_blank(),
    axis.title = element_blank())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/fisk-s-mississippi-river-meander-in-r/index.en_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Lets zoom in even closer, and add in a basemap to get some of those features in the original map with &lt;code&gt;get_stamenmap()&lt;/code&gt; from &lt;a href=&#34;https://github.com/dkahle/ggmap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggmap&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;base &amp;lt;- ggmap::get_stamenmap(bbox = c(-91.4, 33.6, -90.8, 34.0),
                             maptype = &amp;quot;terrain-lines&amp;quot;, 
                             messaging = FALSE, zoom = 12) %&amp;gt;% 
  ggmap()


latit &amp;lt;- base$data$lat
long &amp;lt;- base$data$lon
coords &amp;lt;- matrix(c(latit, long),nrow = 4)
p &amp;lt;- Polygon(coords = coords)
ps &amp;lt;- Polygons(list(p), 1)
sps &amp;lt;- SpatialPolygons(list(ps)) %&amp;gt;% 
  st_as_sf() %&amp;gt;% 
  sf::st_set_crs(&amp;quot;+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs&amp;quot;)

poly &amp;lt;- as(raster::extent(-91.4, -90.8, 33.6, 34.0), &amp;quot;SpatialPolygons&amp;quot;)  %&amp;gt;%
  st_as_sf() %&amp;gt;%
  sf::st_set_crs(&amp;quot;+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs&amp;quot;)

base +
  geom_sf(data = saucier_holocene_alluvial_close,
          color = NA, inherit.aes = FALSE,
          fill = &amp;quot;#b97f74&amp;quot;) +
  geom_sf(data = saucier_holocene_close,
          fill = &amp;quot;#e4d5b6&amp;quot;,
          inherit.aes = FALSE,
          color = NA,) +
  geom_sf(data = saucier_pleistocene,
          inherit.aes = FALSE,
          fill = &amp;quot;green&amp;quot;) +
  geom_sf(data = ms_r_1983,
          inherit.aes = FALSE,
          fill = &amp;quot;#9fa066&amp;quot;,
          color = NA) +
  labs(title = &amp;quot;Mississippi River and Alluvial Valley&amp;quot;,
       fill = &amp;quot;Formation Description&amp;quot;,
       caption = paste0(&amp;quot;USGS 2018, MARIS 1983&amp;quot;, &amp;quot;\n&amp;quot;,
                        &amp;quot;Basemap: Stamen&amp;quot;, &amp;quot;\n&amp;quot;,
                        &amp;quot;Liz Roten&amp;quot;)) +
  my_theme() +
  theme(axis.title = element_blank(),
        plot.caption = element_text(size = 6*3.4))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/fisk-s-mississippi-river-meander-in-r/index.en_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;wisconsin-glaciation&#34;&gt;Wisconsin glaciation&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://en.wikipedia.org/wiki/Wisconsin_glaciation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wisconsin Glacial Episode&lt;/a&gt; was the most recent glacial period.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;saucier_holocene_alluvial_closer &amp;lt;- st_intersection(st_make_valid(saucier_holocene_alluvial), st_as_sf(poly))
saucier_holocene_closer &amp;lt;- st_intersection(saucier_holocene,
                                           st_as_sf(poly))
saucier_pleistocene_closer &amp;lt;- st_intersection(st_make_valid(saucier),
                                              st_as_sf(poly)) %&amp;gt;% 
  filter(Geo_Age == &amp;quot;Pleistocene&amp;quot;)
saucier_closer &amp;lt;- st_intersection(st_make_valid(saucier),
                                  st_as_sf(poly))
ms_r_closer &amp;lt;- st_intersection(ms_r_1983,
                               st_as_sf(poly))

primary &amp;lt;- ggplot() +
  geom_sf(data = saucier_pleistocene_closer,
          color = NA, inherit.aes = FALSE,
          aes(fill = Formation)) +
  scale_fill_manual(values = c(&amp;quot;#8d977c&amp;quot;,
                               &amp;quot;#716b2f&amp;quot;,
                               &amp;quot;#bea85d&amp;quot;),
                    labels = c(&amp;quot;Prairie Complex&amp;quot;,
                               &amp;quot;Early Wisconsin&amp;quot;,
                               &amp;quot;Late Wisconsin&amp;quot;)) +
  geom_sf(data = saucier_holocene_alluvial_closer,
          color = NA, inherit.aes = FALSE,
          fill = &amp;quot;#b97f74&amp;quot;) +
  geom_sf(data = saucier_holocene_closer,
          fill = &amp;quot;#e4d5b6&amp;quot;,
          inherit.aes = FALSE,
          color = NA) +
  geom_sf(data = ms_r_closer,
          inherit.aes = FALSE,
          fill = &amp;quot;#9fa066&amp;quot;,
          color = NA) +
  geom_text_repel(data = saucier_holocene_closer[1,],
                  aes(geometry = geometry),
                  stat = &amp;quot;sf_coordinates&amp;quot;,
                  nudge_x = 0.2,
                  nudge_y = -0.08,
                  label = str_wrap(&amp;quot;Historical river track&amp;quot;,
                                   width = 15),
                  family = &amp;quot;Open Sans Light Italic&amp;quot;,
                  size = 3*3.4
  ) +
  geom_text_repel(data = saucier_holocene_alluvial_closer[1,],
                  aes(geometry = geometry),
                  stat = &amp;quot;sf_coordinates&amp;quot;,
                  nudge_x = -0.1,
                  nudge_y = 0,
                  label = str_wrap(&amp;quot;Abandoned channels and courses&amp;quot;,
                                   width = 15),
                  family = &amp;quot;Open Sans Light Italic&amp;quot;,
                  size = 3*3.4
  ) +
  geom_text_repel(data = ms_r_closer[5,],
                  aes(geometry = geometry),
                  stat = &amp;quot;sf_coordinates&amp;quot;,
                  nudge_x = -0.15,
                  nudge_y = 0.05,
                  label = str_wrap(&amp;quot;River track, 1983&amp;quot;, 
                                   width = 15),
                  family = &amp;quot;Open Sans Light Italic&amp;quot;,
                  size = 3*3.4
  ) +
  labs(title = &amp;quot;Mississippi River&amp;quot;,
       subtitle = &amp;quot;Pleistocene features&amp;quot;,
       fill = &amp;quot;&amp;quot;,
       caption = paste0(&amp;quot;USGS 2018, MARIS 1983&amp;quot;, &amp;quot;\n&amp;quot;,
                        &amp;quot;Liz Roten&amp;quot;)) +
  my_theme() +
  theme(axis.title = element_blank(),
        axis.text = element_blank(),
        plot.margin = unit(c(1,1,1,1), &amp;quot;mm&amp;quot;))

primary
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/fisk-s-mississippi-river-meander-in-r/index.en_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;context-and-inset-map&#34;&gt;Context and inset map&lt;/h3&gt;
&lt;p&gt;To add a little more context, lets use &lt;a href=&#34;https://walkerke.github.io/tidycensus/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tidycensus&lt;/a&gt; to bring in the TIGER shapefiles of Mississippi, Louisiana, and Arkansas.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;all_states &amp;lt;- tigris::states(
                            class = &amp;quot;sf&amp;quot;,
                            year = 2018) %&amp;gt;% 
  dplyr::select(NAME) %&amp;gt;% 
  dplyr::filter(NAME %in% c(&amp;quot;Mississippi&amp;quot;,
                                      &amp;quot;Arkansas&amp;quot;,
                                      &amp;quot;Louisiana&amp;quot;)) %&amp;gt;% 
  unique()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets take a look at what we got from tidycensus.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot() +
  geom_sf(data = all_states,
          fill = &amp;quot;whitesmoke&amp;quot;,
          color = &amp;quot;darkgray&amp;quot;) +
  geom_sf_text(data = all_states,
               label = all_states$NAME,
               nudge_y = -0.25,
               size = 4,
               family = &amp;quot;Open Sans Light&amp;quot;) +
  geom_sf(data = ms_r_1983,
          inherit.aes = FALSE,
          fill = &amp;quot;lightblue&amp;quot;,
          color = &amp;quot;lightblue&amp;quot;,
          size = 1,
          color = NA) +
  ggrepel::geom_text_repel(data = ms_r_1983[1,],
                           aes(geometry = geometry),
                           stat = &amp;quot;sf_coordinates&amp;quot;,
                           label = stringr::str_wrap(&amp;quot;Mississippi River&amp;quot;, 
                                                     width = 11), 
                           nudge_x = 1,
                           nudge_y = -1,
                           family = &amp;quot;Open Sans Light Italic&amp;quot;,
                           size = 3 * 3.4
  ) +
  geom_sf(data = poly,
          fill = NA, 
          color = &amp;quot;black&amp;quot;,
          size = 1) + 
  labs(caption = paste0(&amp;quot;US ACS 2010, MARIS 1983&amp;quot;), 
       title = &amp;quot;Mississippi River and surrounding states&amp;quot;) +
  my_theme() +
  theme_void()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/fisk-s-mississippi-river-meander-in-r/index.en_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can save a simplified version of the state map to serve as an inset map.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;inset &amp;lt;- ggplot() +
  geom_sf(data = all_states,
          fill = &amp;quot;whitesmoke&amp;quot;,
          color = &amp;quot;darkgray&amp;quot;) +

  geom_sf(data = ms_r_1983,
          inherit.aes = FALSE,
          fill = &amp;quot;lightblue&amp;quot;,
          color = &amp;quot;lightblue&amp;quot;,
          size = 1,
          color = NA) +
  geom_sf(data = poly,
          fill = NA, 
          color = &amp;quot;black&amp;quot;,
          size = 1) + 
  my_theme() +
  theme_void()

inset &amp;lt;- as_grob(inset)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggdraw(primary) +
  draw_grob(inset,
            scale = 0.3,
            hjust = -0.4,
            vjust = 0.3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;lizroten.com/blog/fisk-s-mississippi-river-meander-in-r/index.en_files/figure-html/unnamed-chunk-23-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Finally, lets save this map as an SVG.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggsave(&amp;quot;final_map.svg&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;finishing-up&#34;&gt;Finishing up&lt;/h2&gt;
&lt;p&gt;I donât make static maps as often as I used to, so it was a bit weird doing map design work in RStudio, rather than ArcMap or Illustrator. There are a lot of tiny adjustments I want to make to the element positions. I exported the last map as an SVG, and then made some adjustments in Inkscape.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;final_map.png&#34; alt=&#34;Edited map of Mississippi River with Pleistocene features&#34;&gt;&lt;/p&gt;
&lt;p&gt;Iâm still not quite happy with the un-used white space on the right, but, hey, Iâll take it ðââï¸.&lt;/p&gt;
&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;
&lt;p&gt;Colors were inspired by the original map. I extracted the exact values using &lt;a href=&#34;https://www.lifewire.com/generate-a-color-scheme-from-image-1701671&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GIMP&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;People do so many cool things with Fiskâs map series! Check out a few below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.flickr.com/photos/165735975@N07/43345684644/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Modern LIDAR images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Quilts by &lt;a href=&#34;http://www.timnatarr.com/gallery&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Timna Tarr&lt;/a&gt; and &lt;a href=&#34;http://www.cathyfussellquilts.com/#/river-series/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cathy Fussell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the original plates check out these two sites.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Georeferenced TIFs from &lt;a href=&#34;https://lmvmapping.erdc.usace.army.mil/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;USGS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;High resolution JPGs from &lt;a href=&#34;http://www.radicalcartography.net/index.html?fisk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Radical Cartography&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can read more about Harold Fiskâs work at &lt;a href=&#34;https://mappingmovement.newberry.org/selection/ancient-courses-mississippi-river-meander-belt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mapping Movement in American History and Culture&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are interested in more geology on the lower Mississippi alluvial valley, check out &lt;a href=&#34;https://www.sciencedirect.com/science/article/abs/pii/S0013795296000117&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fluvial geomorphic features of the Lower Mississippi alluvial valley&lt;/a&gt; by Lawson M. Smith.&lt;/p&gt;
&lt;h3 id=&#34;data-citation&#34;&gt;Data citation&lt;/h3&gt;
&lt;p&gt;Wacaster, S.R., Clark, J.M., Westerman, D.A., and Kress, W.H., 2018, Digital Dataset for the Geomorphology of the Lower Mississippi River Valley in Missouri, Kentucky, Arkansas, Tennessee, Louisiana, and Mississippi: U.S. Geological Survey data release, &lt;a href=&#34;https://doi.org/10.5066/F7N878QN&#34;&gt;https://doi.org/10.5066/F7N878QN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for reading! Feel free to leave a comment or question below.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HIV and African American Populations in the US</title>
      <link>lizroten.com/blog/hiv-and-african-american-populations-in-the-us/</link>
      <pubDate>Thu, 09 Nov 2017 00:00:00 +0000</pubDate>
      <guid>lizroten.com/blog/hiv-and-african-american-populations-in-the-us/</guid>
      <description>&lt;p&gt;A map I made during my time at Macalester College.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3 Years of Mental Health: A quantified-self story</title>
      <link>lizroten.com/blog/3-years-of-mental-health-a-quantified-self-story/</link>
      <pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate>
      <guid>lizroten.com/blog/3-years-of-mental-health-a-quantified-self-story/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    View a higher resolution of this viz &lt;a href=&#34;lizroten.com/lizroten.com/docs/svp_final.pdf&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;about-the-process&#34;&gt;About the Process&lt;/h2&gt;
&lt;p&gt;I use &lt;a href=&#34;https://emoodtracker.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eMoods&lt;/a&gt; to track my mental health from day to day. For this viz, I used eMoods data, as well as my Google Location History data, to display my life between February 2015 and October 2017. I used ggplot2 in R Studio to generate the radial bar charts on the far rights, and Adobe Illustrator to construct the bar graphs in the bottom left corner. For the heatmaps, I first attempted to use ArcGIS to view data I downloaded from my Google account directly but quickly found that software to be limiting for the goals of this project  I forked and modified &lt;a href=&#34;https://locationhistoryvisualizer.com/heatmap/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Location History Visualizer&lt;/a&gt; using JavaScript, HTML, and CSS to use my own color scheme and preferred base map.  I assembled the images in Adobe Illustrator and presented this work for my class.&lt;/p&gt;
&lt;p&gt;I worked with geospatial data in formats I was unfamiliar with, such as KML, JSON, and tar.gz zipped files. I also had no prior experience in Adobe Illustrator, JavaScript, HTML, and CSS. This piece not only demonstrates my skill in these areas but also my persistence and commitment to telling my story.&lt;/p&gt;
&lt;p&gt;During my Spring 2018 independent project, I also used R Shiny to take a simple, interactive look at the polar coordinate bar graphs. You can see this app on its own &lt;a href=&#34;https://eroten.shinyapps.io/independentFP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; and the updated version &lt;a href=&#34;https://eroten.shinyapps.io/01_shiny/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&#34;https://eroten.shinyapps.io/independentFP/&#34; width=&#34;100%&#34; height=&#34;650&#34; style=&#34;border-color: transparent;&#34;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
